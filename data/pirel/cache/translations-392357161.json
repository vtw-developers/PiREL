{
  "template": "return [__ ^ (__ >> 1) for __ in range(1 << n)]",
  "source_lang": "py",
  "target_lang": "js",
  "template_origin": "return [i ^ (i >> 1) for i in range(1 << n)]",
  "translations": {
    "return [i ^ (i >> 1) for i in range(1 << n)]": [
      "function f_gold(n) {\n    const result = [];\n    for (let i = 0; i < (1 << n); i++) {\n        result.push(i ^ (i >> 1));\n    }\n    return result;\n}"
    ],
    "return [j ^ (j >> 1) for j in range(1 << n)]": [
      "function f_gold(n) {\n    const result = [];\n    for(let j=0; j<(1 << n); j++) {\n        result.push(j ^ (j >> 1));\n    }\n    return result;\n}"
    ],
    "return [k ^ (k >> 1) for k in range(1 << n)]": [
      "function f_gold(n) {\n    let result = [];\n    for (let k = 0; k < (1 << n); k++) {\n        result.push(k ^ (k >> 1));\n    }\n    return result;\n}"
    ],
    "return [x ^ (x >> 1) for x in range(1 << n)]": [
      "function gold(n) {\n    let result = [];\n    for (let x = 0; x < (1 << n); x++) {\n        result.push(x ^ (x >> 1));\n    }\n    return result;\n}"
    ],
    "return [y ^ (y >> 1) for y in range(1 << n)]": [
      "function calculate(n) {\n    let result = [];\n    for (let y = 0; y < Math.pow(2, n); y++) {\n        result.push(y ^ (y >> 1));\n    }\n    return result;\n}"
    ]
  }
}
