{
  "template": "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[__])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans",
  "source_lang": "py",
  "target_lang": "js",
  "template_origin": "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans",
  "translations": {
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}",
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, u, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, u, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.extend(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}",
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.extendleft(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.unshift([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def fgold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function fgold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s - c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s - c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}",
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s - c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s * c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s * c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s / c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s / c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s % c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s % c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(i)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(i);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}",
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(i);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.clear()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.length = 0;\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(1, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push(t.slice());\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(1, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 1, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            v = candidates[i]\n            t.append(v)\n            dfs(s + v, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let v = candidates[i];\n            t.push(v);\n            dfs(s + v, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, __, t):\n        if s == target:\n            ans.append(t[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            t.append(c)\n            dfs(s + c, i, t)\n            t.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, t) {\n        if (s === target) {\n            ans.push([...t]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            t.push(c);\n            dfs(s + c, i, t);\n            t.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(s, u, comb):\n        if s == target:\n            ans.append(comb[:])\n            return\n        if s > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            comb.append(c)\n            dfs(s + c, i, comb)\n            comb.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(s, u, comb) {\n        if (s === target) {\n            ans.push([...comb]);\n            return;\n        }\n        if (s > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            comb.push(c);\n            dfs(s + c, i, comb);\n            comb.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(sum_val, idx, combination):\n        if sum_val == target:\n            ans.append(combination[:])\n            return\n        if sum_val > target:\n            return\n        for i in range(idx, len(candidates)):\n            num = candidates[i]\n            combination.append(num)\n            dfs(sum_val + num, i, combination)\n            combination.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(sum_val, idx, combination) {\n        if (sum_val === target) {\n            ans.push([...combination]);\n            return;\n        }\n        if (sum_val > target) {\n            return;\n        }\n        for (let i = idx; i < candidates.length; i++) {\n            let num = candidates[i];\n            combination.push(num);\n            dfs(sum_val + num, i, combination);\n            combination.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ],
    "def f_gold(candidates: List[int], target: int) -> List[List[int]]:\n    def dfs(sum, u, result):\n        if sum == target:\n            ans.append(result[:])\n            return\n        if sum > target:\n            return\n        for i in range(u, len(candidates)):\n            c = candidates[i]\n            result.append(c)\n            dfs(sum + c, i, result)\n            result.pop()\n    ans = []\n    dfs(0, 0, [])\n    return ans": [
      "function f_gold(candidates, target) {\n    function dfs(sum, u, result) {\n        if (sum === target) {\n            ans.push(result.slice());\n            return;\n        }\n        if (sum > target) {\n            return;\n        }\n        for (let i = u; i < candidates.length; i++) {\n            let c = candidates[i];\n            result.push(c);\n            dfs(sum + c, i, result);\n            result.pop();\n        }\n    }\n    let ans = [];\n    dfs(0, 0, []);\n    return ans;\n}"
    ]
  }
}
