{
  "template": "[chars[int(d) - 2] for d in __]",
  "lang": "py",
  "temperature": 0.7,
  "code_blocks": [
    "[chars[int(d) - 2] for d in range(10)]",
    "[chars[int(d) - 2] for d in '0123456789']",
    "[chars[int(d) - 2] for d in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]",
    "[chars[int(d) - 2] for d in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]",
    "[chars[int(d) - 2] for d in {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}]",
    "[chars[int(d) - 2] for d in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}]",
    "[chars[int(d) - 2] for d in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']]",
    "[chars[int(d) - 2] for d in '9876543210']",
    "[chars[int(d) - 2] for d in reversed(range(10))]",
    "[chars[int(d) - 2] for d in reversed('9876543210')]",
    "[chars[int(d) - 2] for d in range(10)]",
    "[chars[int(d) - 2] for d in '0123456789']",
    "[chars[int(d) - 2] for d in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]",
    "[chars[int(d) - 2] for d in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]",
    "[chars[int(d) - 2] for d in {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}]",
    "[chars[int(d) - 2] for d in (str(n) for n in range(10))]",
    "[chars[int(d) - 2] for d in [str(n) for n in range(10)]]",
    "[chars[int(d) - 2] for d in {str(n) for n in range(10)}]",
    "[chars[int(d) - 2] for d in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')]",
    "[chars[int(d) - 2] for d in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']]",
    "[chars[int(d) - 2] for d in \"1234567890\"]",
    "[chars[int(d) - 2] for d in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']]",
    "[chars[int(d) - 2] for d in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')]",
    "[chars[int(d) - 2] for d in {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0'}]",
    "[chars[int(d) - 2] for d in range(10)]",
    "[chars[int(d) - 2] for d in range(1, 11)]",
    "[chars[int(d) - 2] for d in range(ord('1'), ord('0') + 1)]",
    "[chars[int(d) - 2] for d in map(str, range(1, 11))]",
    "[chars[int(d) - 2] for d in map(str, range(ord('1'), ord('0') + 1))]",
    "[chars[int(d) - 2] for d in filter(lambda x: x.isdigit(), \"1a2b3c4d5e6f7g8h9i0j\")]",
    "[chars[int(d) - 2] for d in range(10)]",
    "[chars[int(d) - 2] for d in [1, 2, 3, 4, 5]]",
    "[chars[int(d) - 2] for d in \"12345\"]",
    "[chars[int(d) - 2] for d in (1, 2, 3, 4, 5)]",
    "[chars[int(d) - 2] for d in {1, 2, 3, 4, 5}]",
    "[chars[int(d) - 2] for d in {\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5}]",
    "[chars[int(d) - 2] for d in (str(i) for i in range(1, 6))]",
    "[chars[int(d) - 2] for d in (str(i) for i in range(5, 0, -1))]",
    "[chars[int(d) - 2] for d in (str(i) for i in range(6) if i > 1)]",
    "[chars[int(d) - 2] for d in (str(i) for i in [1, 3, 5])]",
    "# Variant 1\n[chars[int(d) - 2] for d in range(10)]\n\n# Variant 2\n[chars[int(d) - 2] for d in range(1, 11)]\n\n# Variant 3\n[chars[int(d) - 2] for d in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]\n\n# Variant 4\n[chars[int(d) - 2] for d in (\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")]\n\n# Variant 5\n[chars[int(d) - 2] for d in {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"}]\n\n# Variant 6\n[chars[int(d) - 2] for d in \"0123456789\"]\n\n# Variant 7\n[chars[int(d) - 2] for d in [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]]\n\n# Variant 8\n[chars[int(d) - 2] for d in tuple(\"0123456789\")]\n\n# Variant 9\n[chars[int(d) - 2] for d in list(\"0123456789\")]\n\n# Variant 10\n[chars[int(d) - 2] for d in set(\"0123456789\")]"
  ],
  "num_code_blocks": 41
}
