{
  "simplest_template": "def f_gold(nums: List[int], n: int) -> int:\n    return n",
  "simplified_templates_stats": [
    [
      0,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], target: int) -> bool:\n    return target in nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "target: int",
          "bool",
          "return target in nums"
        ]
      }
    ],
    [
      1,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], index: int) -> int:\n    return nums[index]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "index: int",
          "int",
          "return nums[index]"
        ]
      }
    ],
    [
      2,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], factor: int) -> List[int]:\n    return [num * factor for num in nums]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "factor: int",
          "List[int]",
          "return [num * factor for num in nums]"
        ]
      }
    ],
    [
      3,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          7
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], threshold: int) -> List[int]:\n    return [num for num in nums if num > threshold]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "threshold: int",
          "List[int]",
          "return [num for num in nums if num > threshold]"
        ]
      }
    ],
    [
      4,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          8
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], n: int) -> int:\n    return sum(nums[:n])",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "n: int",
          "int",
          "return sum(nums[:n])"
        ]
      }
    ],
    [
      5,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], index: int) -> int:\n    return nums[index]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "index: int",
          "int",
          "return nums[index]"
        ]
      }
    ],
    [
      6,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], value: int) -> bool:\n    return value in nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "value: int",
          "bool",
          "return value in nums"
        ]
      }
    ],
    [
      7,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], n: int) -> List[int]:\n    return nums * n",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "n: int",
          "List[int]",
          "return nums * n"
        ]
      }
    ],
    [
      8,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], target: int) -> int:\n    return nums.index(target)",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "target: int",
          "int",
          "return nums.index(target)"
        ]
      }
    ],
    [
      9,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], length: int) -> List[int]:\n    return nums[:length]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "length: int",
          "List[int]",
          "return nums[:length]"
        ]
      }
    ],
    [
      10,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], target: int) -> bool:\n    return target in nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "target: int",
          "bool",
          "return target in nums"
        ]
      }
    ],
    [
      11,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], index: int) -> int:\n    return nums[index]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "index: int",
          "int",
          "return nums[index]"
        ]
      }
    ],
    [
      12,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], value: int) -> List[int]:\n    nums.append(value)\n    return nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "value: int",
          "List[int]",
          "    nums.append(value)\n    return nums"
        ]
      }
    ],
    [
      13,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          7
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], count: int) -> List[int]:\n    return [num for num in nums if num == count]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "count: int",
          "List[int]",
          "return [num for num in nums if num == count]"
        ]
      }
    ],
    [
      14,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          7
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], threshold: int) -> List[int]:\n    return [num for num in nums if num > threshold]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "threshold: int",
          "List[int]",
          "return [num for num in nums if num > threshold]"
        ]
      }
    ],
    [
      15,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], index: int) -> int:\n    return nums[index]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "index: int",
          "int",
          "return nums[index]"
        ]
      }
    ],
    [
      16,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], target: int) -> bool:\n    return target in nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "target: int",
          "bool",
          "return target in nums"
        ]
      }
    ],
    [
      17,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], new_num: int) -> List[int]:\n    nums.append(new_num)\n    return nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "new_num: int",
          "List[int]",
          "    nums.append(new_num)\n    return nums"
        ]
      }
    ],
    [
      18,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], factor: int) -> List[int]:\n    return [num * factor for num in nums]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "factor: int",
          "List[int]",
          "return [num * factor for num in nums]"
        ]
      }
    ],
    [
      19,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], length: int) -> List[int]:\n    return nums[:length]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "length: int",
          "List[int]",
          "return nums[:length]"
        ]
      }
    ],
    [
      20,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          4
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], n: int) -> int:\n    return n",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "n: int",
          "int",
          "return n"
        ]
      }
    ],
    [
      21,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], target: int) -> bool:\n    return target in nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "target: int",
          "bool",
          "return target in nums"
        ]
      }
    ],
    [
      22,
      {
        "depths_at_templatized_nodes": [
          4,
          3,
          5
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], index: int) -> int:\n    return nums[index]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "index: int",
          "int",
          "return nums[index]"
        ]
      }
    ],
    [
      23,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], value: int) -> List[int]:\n    nums.append(value)\n    return nums",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "value: int",
          "List[int]",
          "    nums.append(value)\n    return nums"
        ]
      }
    ],
    [
      24,
      {
        "depths_at_templatized_nodes": [
          4,
          4,
          6
        ],
        "has_parse_error": false,
        "is_type_isomorphic_to_template_origin": true,
        "simplified_template": "def f_gold(nums: List[int], length: int) -> List[int]:\n    return nums[:length]",
        "template_origin": "def f_gold(nums: List[int], target: int) -> List[int]:\n    helper = {}\n    for i, v in enumerate(nums):\n        num = target - v\n        if num in helper:\n            return [helper[num], i]\n        helper[v] = i",
        "texts_at_templatized_nodes": [
          "length: int",
          "List[int]",
          "return nums[:length]"
        ]
      }
    ]
  ],
  "templatized_node_texts": [
    "n: int",
    "int",
    "return n"
  ]
}
