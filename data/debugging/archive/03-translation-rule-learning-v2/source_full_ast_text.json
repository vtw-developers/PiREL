[
  [
    "py.module",
    "### findMedianSortedArrays \nimport math\nfrom math import inf\nfrom typing import *\ndef f_gold(nums1: List[int], nums2: List[int]) -> float:\n    def findKth(i, j, k):\n        if i >= m:\n            return nums2[j + k - 1]\n        if j >= n:\n            return nums1[i + k - 1]\n        if k == 1:\n            return min(nums1[i], nums2[j])\n        midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')\n        midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')\n        if midVal1 < midVal2:\n            return findKth(i + k // 2, j, k - k // 2)\n        return findKth(i, j + k // 2, k - k // 2)\n    m, n = len(nums1), len(nums2)\n    left, right = (m + n + 1) // 2, (m + n + 2) // 2\n    return (findKth(0, 0, left) + findKth(0, 0, right)) / 2"
  ],
  0,
  [
    [
      "py.comment",
      "### findMedianSortedArrays "
    ],
    1,
    "\"### findMedianSortedArrays \""
  ],
  [
    [
      "py.import_statement",
      "import math"
    ],
    2,
    "\"import\"",
    [
      [
        "py.dotted_name",
        "math"
      ],
      3,
      [
        [
          "py.identifier",
          "math"
        ],
        4,
        "\"math\""
      ]
    ]
  ],
  [
    [
      "py.import_from_statement",
      "from math import inf"
    ],
    5,
    "\"from\"",
    [
      [
        "py.dotted_name",
        "math"
      ],
      6,
      [
        [
          "py.identifier",
          "math"
        ],
        7,
        "\"math\""
      ]
    ],
    "\"import\"",
    [
      [
        "py.dotted_name",
        "inf"
      ],
      8,
      [
        [
          "py.identifier",
          "inf"
        ],
        9,
        "\"inf\""
      ]
    ]
  ],
  [
    [
      "py.import_from_statement",
      "from typing import *"
    ],
    10,
    "\"from\"",
    [
      [
        "py.dotted_name",
        "typing"
      ],
      11,
      [
        [
          "py.identifier",
          "typing"
        ],
        12,
        "\"typing\""
      ]
    ],
    "\"import\"",
    [
      [
        "py.wildcard_import",
        "*"
      ],
      13,
      "\"*\""
    ]
  ],
  [
    [
      "py.function_definition",
      "def f_gold(nums1: List[int], nums2: List[int]) -> float:\n    def findKth(i, j, k):\n        if i >= m:\n            return nums2[j + k - 1]\n        if j >= n:\n            return nums1[i + k - 1]\n        if k == 1:\n            return min(nums1[i], nums2[j])\n        midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')\n        midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')\n        if midVal1 < midVal2:\n            return findKth(i + k // 2, j, k - k // 2)\n        return findKth(i, j + k // 2, k - k // 2)\n    m, n = len(nums1), len(nums2)\n    left, right = (m + n + 1) // 2, (m + n + 2) // 2\n    return (findKth(0, 0, left) + findKth(0, 0, right)) / 2"
    ],
    14,
    "\"def\"",
    [
      [
        "py.identifier",
        "f_gold"
      ],
      15,
      "\"f_gold\""
    ],
    [
      [
        "py.parameters",
        "(nums1: List[int], nums2: List[int])"
      ],
      16,
      "\"(\"",
      [
        [
          "py.typed_parameter",
          "nums1: List[int]"
        ],
        17,
        [
          [
            "py.identifier",
            "nums1"
          ],
          18,
          "\"nums1\""
        ],
        "\":\"",
        [
          [
            "py.type",
            "List[int]"
          ],
          19,
          [
            [
              "py.subscript",
              "List[int]"
            ],
            20,
            [
              [
                "py.identifier",
                "List"
              ],
              21,
              "\"List\""
            ],
            "\"[\"",
            [
              [
                "py.identifier",
                "int"
              ],
              22,
              "\"int\""
            ],
            "\"]\""
          ]
        ]
      ],
      "\",\"",
      [
        [
          "py.typed_parameter",
          "nums2: List[int]"
        ],
        23,
        [
          [
            "py.identifier",
            "nums2"
          ],
          24,
          "\"nums2\""
        ],
        "\":\"",
        [
          [
            "py.type",
            "List[int]"
          ],
          25,
          [
            [
              "py.subscript",
              "List[int]"
            ],
            26,
            [
              [
                "py.identifier",
                "List"
              ],
              27,
              "\"List\""
            ],
            "\"[\"",
            [
              [
                "py.identifier",
                "int"
              ],
              28,
              "\"int\""
            ],
            "\"]\""
          ]
        ]
      ],
      "\")\""
    ],
    "\"->\"",
    [
      [
        "py.type",
        "float"
      ],
      29,
      [
        [
          "py.identifier",
          "float"
        ],
        30,
        "\"float\""
      ]
    ],
    "\":\"",
    [
      [
        "py.block",
        "def findKth(i, j, k):\n        if i >= m:\n            return nums2[j + k - 1]\n        if j >= n:\n            return nums1[i + k - 1]\n        if k == 1:\n            return min(nums1[i], nums2[j])\n        midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')\n        midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')\n        if midVal1 < midVal2:\n            return findKth(i + k // 2, j, k - k // 2)\n        return findKth(i, j + k // 2, k - k // 2)\n    m, n = len(nums1), len(nums2)\n    left, right = (m + n + 1) // 2, (m + n + 2) // 2\n    return (findKth(0, 0, left) + findKth(0, 0, right)) / 2"
      ],
      31,
      [
        [
          "py.function_definition",
          "def findKth(i, j, k):\n        if i >= m:\n            return nums2[j + k - 1]\n        if j >= n:\n            return nums1[i + k - 1]\n        if k == 1:\n            return min(nums1[i], nums2[j])\n        midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')\n        midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')\n        if midVal1 < midVal2:\n            return findKth(i + k // 2, j, k - k // 2)\n        return findKth(i, j + k // 2, k - k // 2)"
        ],
        32,
        "\"def\"",
        [
          [
            "py.identifier",
            "findKth"
          ],
          33,
          "\"findKth\""
        ],
        [
          [
            "py.parameters",
            "(i, j, k)"
          ],
          34,
          "\"(\"",
          [
            [
              "py.identifier",
              "i"
            ],
            35,
            "\"i\""
          ],
          "\",\"",
          [
            [
              "py.identifier",
              "j"
            ],
            36,
            "\"j\""
          ],
          "\",\"",
          [
            [
              "py.identifier",
              "k"
            ],
            37,
            "\"k\""
          ],
          "\")\""
        ],
        "\":\"",
        [
          [
            "py.block",
            "if i >= m:\n            return nums2[j + k - 1]\n        if j >= n:\n            return nums1[i + k - 1]\n        if k == 1:\n            return min(nums1[i], nums2[j])\n        midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')\n        midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')\n        if midVal1 < midVal2:\n            return findKth(i + k // 2, j, k - k // 2)\n        return findKth(i, j + k // 2, k - k // 2)"
          ],
          38,
          [
            [
              "py.if_statement",
              "if i >= m:\n            return nums2[j + k - 1]"
            ],
            39,
            "\"if\"",
            [
              [
                "py.comparison_operator",
                "i >= m"
              ],
              40,
              [
                [
                  "py.identifier",
                  "i"
                ],
                41,
                "\"i\""
              ],
              "\">=\"",
              [
                [
                  "py.identifier",
                  "m"
                ],
                42,
                "\"m\""
              ]
            ],
            "\":\"",
            [
              [
                "py.block",
                "return nums2[j + k - 1]"
              ],
              43,
              [
                [
                  "py.return_statement",
                  "return nums2[j + k - 1]"
                ],
                44,
                "\"return\"",
                [
                  [
                    "py.subscript",
                    "nums2[j + k - 1]"
                  ],
                  45,
                  [
                    [
                      "py.identifier",
                      "nums2"
                    ],
                    46,
                    "\"nums2\""
                  ],
                  "\"[\"",
                  [
                    [
                      "py.binary_operator",
                      "j + k - 1"
                    ],
                    47,
                    [
                      [
                        "py.binary_operator",
                        "j + k"
                      ],
                      48,
                      [
                        [
                          "py.identifier",
                          "j"
                        ],
                        49,
                        "\"j\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.identifier",
                          "k"
                        ],
                        50,
                        "\"k\""
                      ]
                    ],
                    "\"-\"",
                    [
                      [
                        "py.integer",
                        "1"
                      ],
                      51,
                      "\"1\""
                    ]
                  ],
                  "\"]\""
                ]
              ]
            ]
          ],
          [
            [
              "py.if_statement",
              "if j >= n:\n            return nums1[i + k - 1]"
            ],
            52,
            "\"if\"",
            [
              [
                "py.comparison_operator",
                "j >= n"
              ],
              53,
              [
                [
                  "py.identifier",
                  "j"
                ],
                54,
                "\"j\""
              ],
              "\">=\"",
              [
                [
                  "py.identifier",
                  "n"
                ],
                55,
                "\"n\""
              ]
            ],
            "\":\"",
            [
              [
                "py.block",
                "return nums1[i + k - 1]"
              ],
              56,
              [
                [
                  "py.return_statement",
                  "return nums1[i + k - 1]"
                ],
                57,
                "\"return\"",
                [
                  [
                    "py.subscript",
                    "nums1[i + k - 1]"
                  ],
                  58,
                  [
                    [
                      "py.identifier",
                      "nums1"
                    ],
                    59,
                    "\"nums1\""
                  ],
                  "\"[\"",
                  [
                    [
                      "py.binary_operator",
                      "i + k - 1"
                    ],
                    60,
                    [
                      [
                        "py.binary_operator",
                        "i + k"
                      ],
                      61,
                      [
                        [
                          "py.identifier",
                          "i"
                        ],
                        62,
                        "\"i\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.identifier",
                          "k"
                        ],
                        63,
                        "\"k\""
                      ]
                    ],
                    "\"-\"",
                    [
                      [
                        "py.integer",
                        "1"
                      ],
                      64,
                      "\"1\""
                    ]
                  ],
                  "\"]\""
                ]
              ]
            ]
          ],
          [
            [
              "py.if_statement",
              "if k == 1:\n            return min(nums1[i], nums2[j])"
            ],
            65,
            "\"if\"",
            [
              [
                "py.comparison_operator",
                "k == 1"
              ],
              66,
              [
                [
                  "py.identifier",
                  "k"
                ],
                67,
                "\"k\""
              ],
              "\"==\"",
              [
                [
                  "py.integer",
                  "1"
                ],
                68,
                "\"1\""
              ]
            ],
            "\":\"",
            [
              [
                "py.block",
                "return min(nums1[i], nums2[j])"
              ],
              69,
              [
                [
                  "py.return_statement",
                  "return min(nums1[i], nums2[j])"
                ],
                70,
                "\"return\"",
                [
                  [
                    "py.call",
                    "min(nums1[i], nums2[j])"
                  ],
                  71,
                  [
                    [
                      "py.identifier",
                      "min"
                    ],
                    72,
                    "\"min\""
                  ],
                  [
                    [
                      "py.argument_list",
                      "(nums1[i], nums2[j])"
                    ],
                    73,
                    "\"(\"",
                    [
                      [
                        "py.subscript",
                        "nums1[i]"
                      ],
                      74,
                      [
                        [
                          "py.identifier",
                          "nums1"
                        ],
                        75,
                        "\"nums1\""
                      ],
                      "\"[\"",
                      [
                        [
                          "py.identifier",
                          "i"
                        ],
                        76,
                        "\"i\""
                      ],
                      "\"]\""
                    ],
                    "\",\"",
                    [
                      [
                        "py.subscript",
                        "nums2[j]"
                      ],
                      77,
                      [
                        [
                          "py.identifier",
                          "nums2"
                        ],
                        78,
                        "\"nums2\""
                      ],
                      "\"[\"",
                      [
                        [
                          "py.identifier",
                          "j"
                        ],
                        79,
                        "\"j\""
                      ],
                      "\"]\""
                    ],
                    "\")\""
                  ]
                ]
              ]
            ]
          ],
          [
            [
              "py.expression_statement",
              "midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')"
            ],
            80,
            [
              [
                "py.assignment",
                "midVal1 = nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')"
              ],
              81,
              [
                [
                  "py.identifier",
                  "midVal1"
                ],
                82,
                "\"midVal1\""
              ],
              "\"=\"",
              [
                [
                  "py.conditional_expression",
                  "nums1[i + k // 2 - 1] if i + k // 2 - 1 < m else float('inf')"
                ],
                83,
                [
                  [
                    "py.subscript",
                    "nums1[i + k // 2 - 1]"
                  ],
                  84,
                  [
                    [
                      "py.identifier",
                      "nums1"
                    ],
                    85,
                    "\"nums1\""
                  ],
                  "\"[\"",
                  [
                    [
                      "py.binary_operator",
                      "i + k // 2 - 1"
                    ],
                    86,
                    [
                      [
                        "py.binary_operator",
                        "i + k // 2"
                      ],
                      87,
                      [
                        [
                          "py.identifier",
                          "i"
                        ],
                        88,
                        "\"i\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.binary_operator",
                          "k // 2"
                        ],
                        89,
                        [
                          [
                            "py.identifier",
                            "k"
                          ],
                          90,
                          "\"k\""
                        ],
                        "\"//\"",
                        [
                          [
                            "py.integer",
                            "2"
                          ],
                          91,
                          "\"2\""
                        ]
                      ]
                    ],
                    "\"-\"",
                    [
                      [
                        "py.integer",
                        "1"
                      ],
                      92,
                      "\"1\""
                    ]
                  ],
                  "\"]\""
                ],
                "\"if\"",
                [
                  [
                    "py.comparison_operator",
                    "i + k // 2 - 1 < m"
                  ],
                  93,
                  [
                    [
                      "py.binary_operator",
                      "i + k // 2 - 1"
                    ],
                    94,
                    [
                      [
                        "py.binary_operator",
                        "i + k // 2"
                      ],
                      95,
                      [
                        [
                          "py.identifier",
                          "i"
                        ],
                        96,
                        "\"i\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.binary_operator",
                          "k // 2"
                        ],
                        97,
                        [
                          [
                            "py.identifier",
                            "k"
                          ],
                          98,
                          "\"k\""
                        ],
                        "\"//\"",
                        [
                          [
                            "py.integer",
                            "2"
                          ],
                          99,
                          "\"2\""
                        ]
                      ]
                    ],
                    "\"-\"",
                    [
                      [
                        "py.integer",
                        "1"
                      ],
                      100,
                      "\"1\""
                    ]
                  ],
                  "\"<\"",
                  [
                    [
                      "py.identifier",
                      "m"
                    ],
                    101,
                    "\"m\""
                  ]
                ],
                "\"else\"",
                [
                  [
                    "py.call",
                    "float('inf')"
                  ],
                  102,
                  [
                    [
                      "py.identifier",
                      "float"
                    ],
                    103,
                    "\"float\""
                  ],
                  [
                    [
                      "py.argument_list",
                      "('inf')"
                    ],
                    104,
                    "\"(\"",
                    [
                      [
                        "py.string",
                        "'inf'"
                      ],
                      105,
                      [
                        "anno",
                        [
                          "\"stype\"",
                          "\"\""
                        ],
                        [
                          "\"quote\"",
                          "\"'\""
                        ]
                      ],
                      "\"\\\"\"",
                      [
                        [
                          "py.string_content",
                          "inf"
                        ],
                        106,
                        "\"inf\""
                      ],
                      "\"\\\"\""
                    ],
                    "\")\""
                  ]
                ]
              ]
            ]
          ],
          [
            [
              "py.expression_statement",
              "midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')"
            ],
            107,
            [
              [
                "py.assignment",
                "midVal2 = nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')"
              ],
              108,
              [
                [
                  "py.identifier",
                  "midVal2"
                ],
                109,
                "\"midVal2\""
              ],
              "\"=\"",
              [
                [
                  "py.conditional_expression",
                  "nums2[j + k // 2 - 1] if j + k // 2 - 1 < n else float('inf')"
                ],
                110,
                [
                  [
                    "py.subscript",
                    "nums2[j + k // 2 - 1]"
                  ],
                  111,
                  [
                    [
                      "py.identifier",
                      "nums2"
                    ],
                    112,
                    "\"nums2\""
                  ],
                  "\"[\"",
                  [
                    [
                      "py.binary_operator",
                      "j + k // 2 - 1"
                    ],
                    113,
                    [
                      [
                        "py.binary_operator",
                        "j + k // 2"
                      ],
                      114,
                      [
                        [
                          "py.identifier",
                          "j"
                        ],
                        115,
                        "\"j\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.binary_operator",
                          "k // 2"
                        ],
                        116,
                        [
                          [
                            "py.identifier",
                            "k"
                          ],
                          117,
                          "\"k\""
                        ],
                        "\"//\"",
                        [
                          [
                            "py.integer",
                            "2"
                          ],
                          118,
                          "\"2\""
                        ]
                      ]
                    ],
                    "\"-\"",
                    [
                      [
                        "py.integer",
                        "1"
                      ],
                      119,
                      "\"1\""
                    ]
                  ],
                  "\"]\""
                ],
                "\"if\"",
                [
                  [
                    "py.comparison_operator",
                    "j + k // 2 - 1 < n"
                  ],
                  120,
                  [
                    [
                      "py.binary_operator",
                      "j + k // 2 - 1"
                    ],
                    121,
                    [
                      [
                        "py.binary_operator",
                        "j + k // 2"
                      ],
                      122,
                      [
                        [
                          "py.identifier",
                          "j"
                        ],
                        123,
                        "\"j\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.binary_operator",
                          "k // 2"
                        ],
                        124,
                        [
                          [
                            "py.identifier",
                            "k"
                          ],
                          125,
                          "\"k\""
                        ],
                        "\"//\"",
                        [
                          [
                            "py.integer",
                            "2"
                          ],
                          126,
                          "\"2\""
                        ]
                      ]
                    ],
                    "\"-\"",
                    [
                      [
                        "py.integer",
                        "1"
                      ],
                      127,
                      "\"1\""
                    ]
                  ],
                  "\"<\"",
                  [
                    [
                      "py.identifier",
                      "n"
                    ],
                    128,
                    "\"n\""
                  ]
                ],
                "\"else\"",
                [
                  [
                    "py.call",
                    "float('inf')"
                  ],
                  129,
                  [
                    [
                      "py.identifier",
                      "float"
                    ],
                    130,
                    "\"float\""
                  ],
                  [
                    [
                      "py.argument_list",
                      "('inf')"
                    ],
                    131,
                    "\"(\"",
                    [
                      [
                        "py.string",
                        "'inf'"
                      ],
                      132,
                      [
                        "anno",
                        [
                          "\"stype\"",
                          "\"\""
                        ],
                        [
                          "\"quote\"",
                          "\"'\""
                        ]
                      ],
                      "\"\\\"\"",
                      [
                        [
                          "py.string_content",
                          "inf"
                        ],
                        133,
                        "\"inf\""
                      ],
                      "\"\\\"\""
                    ],
                    "\")\""
                  ]
                ]
              ]
            ]
          ],
          [
            [
              "py.if_statement",
              "if midVal1 < midVal2:\n            return findKth(i + k // 2, j, k - k // 2)"
            ],
            134,
            "\"if\"",
            [
              [
                "py.comparison_operator",
                "midVal1 < midVal2"
              ],
              135,
              [
                [
                  "py.identifier",
                  "midVal1"
                ],
                136,
                "\"midVal1\""
              ],
              "\"<\"",
              [
                [
                  "py.identifier",
                  "midVal2"
                ],
                137,
                "\"midVal2\""
              ]
            ],
            "\":\"",
            [
              [
                "py.block",
                "return findKth(i + k // 2, j, k - k // 2)"
              ],
              138,
              [
                [
                  "py.return_statement",
                  "return findKth(i + k // 2, j, k - k // 2)"
                ],
                139,
                "\"return\"",
                [
                  [
                    "py.call",
                    "findKth(i + k // 2, j, k - k // 2)"
                  ],
                  140,
                  [
                    [
                      "py.identifier",
                      "findKth"
                    ],
                    141,
                    "\"findKth\""
                  ],
                  [
                    [
                      "py.argument_list",
                      "(i + k // 2, j, k - k // 2)"
                    ],
                    142,
                    "\"(\"",
                    [
                      [
                        "py.binary_operator",
                        "i + k // 2"
                      ],
                      143,
                      [
                        [
                          "py.identifier",
                          "i"
                        ],
                        144,
                        "\"i\""
                      ],
                      "\"+\"",
                      [
                        [
                          "py.binary_operator",
                          "k // 2"
                        ],
                        145,
                        [
                          [
                            "py.identifier",
                            "k"
                          ],
                          146,
                          "\"k\""
                        ],
                        "\"//\"",
                        [
                          [
                            "py.integer",
                            "2"
                          ],
                          147,
                          "\"2\""
                        ]
                      ]
                    ],
                    "\",\"",
                    [
                      [
                        "py.identifier",
                        "j"
                      ],
                      148,
                      "\"j\""
                    ],
                    "\",\"",
                    [
                      [
                        "py.binary_operator",
                        "k - k // 2"
                      ],
                      149,
                      [
                        [
                          "py.identifier",
                          "k"
                        ],
                        150,
                        "\"k\""
                      ],
                      "\"-\"",
                      [
                        [
                          "py.binary_operator",
                          "k // 2"
                        ],
                        151,
                        [
                          [
                            "py.identifier",
                            "k"
                          ],
                          152,
                          "\"k\""
                        ],
                        "\"//\"",
                        [
                          [
                            "py.integer",
                            "2"
                          ],
                          153,
                          "\"2\""
                        ]
                      ]
                    ],
                    "\")\""
                  ]
                ]
              ]
            ]
          ],
          [
            [
              "py.return_statement",
              "return findKth(i, j + k // 2, k - k // 2)"
            ],
            154,
            "\"return\"",
            [
              [
                "py.call",
                "findKth(i, j + k // 2, k - k // 2)"
              ],
              155,
              [
                [
                  "py.identifier",
                  "findKth"
                ],
                156,
                "\"findKth\""
              ],
              [
                [
                  "py.argument_list",
                  "(i, j + k // 2, k - k // 2)"
                ],
                157,
                "\"(\"",
                [
                  [
                    "py.identifier",
                    "i"
                  ],
                  158,
                  "\"i\""
                ],
                "\",\"",
                [
                  [
                    "py.binary_operator",
                    "j + k // 2"
                  ],
                  159,
                  [
                    [
                      "py.identifier",
                      "j"
                    ],
                    160,
                    "\"j\""
                  ],
                  "\"+\"",
                  [
                    [
                      "py.binary_operator",
                      "k // 2"
                    ],
                    161,
                    [
                      [
                        "py.identifier",
                        "k"
                      ],
                      162,
                      "\"k\""
                    ],
                    "\"//\"",
                    [
                      [
                        "py.integer",
                        "2"
                      ],
                      163,
                      "\"2\""
                    ]
                  ]
                ],
                "\",\"",
                [
                  [
                    "py.binary_operator",
                    "k - k // 2"
                  ],
                  164,
                  [
                    [
                      "py.identifier",
                      "k"
                    ],
                    165,
                    "\"k\""
                  ],
                  "\"-\"",
                  [
                    [
                      "py.binary_operator",
                      "k // 2"
                    ],
                    166,
                    [
                      [
                        "py.identifier",
                        "k"
                      ],
                      167,
                      "\"k\""
                    ],
                    "\"//\"",
                    [
                      [
                        "py.integer",
                        "2"
                      ],
                      168,
                      "\"2\""
                    ]
                  ]
                ],
                "\")\""
              ]
            ]
          ]
        ]
      ],
      [
        [
          "py.expression_statement",
          "m, n = len(nums1), len(nums2)"
        ],
        169,
        [
          [
            "py.assignment",
            "m, n = len(nums1), len(nums2)"
          ],
          170,
          [
            [
              "py.pattern_list",
              "m, n"
            ],
            171,
            [
              [
                "py.identifier",
                "m"
              ],
              172,
              "\"m\""
            ],
            "\",\"",
            [
              [
                "py.identifier",
                "n"
              ],
              173,
              "\"n\""
            ]
          ],
          "\"=\"",
          [
            [
              "py.expression_list",
              "len(nums1), len(nums2)"
            ],
            174,
            [
              [
                "py.call",
                "len(nums1)"
              ],
              175,
              [
                [
                  "py.identifier",
                  "len"
                ],
                176,
                "\"len\""
              ],
              [
                [
                  "py.argument_list",
                  "(nums1)"
                ],
                177,
                "\"(\"",
                [
                  [
                    "py.identifier",
                    "nums1"
                  ],
                  178,
                  "\"nums1\""
                ],
                "\")\""
              ]
            ],
            "\",\"",
            [
              [
                "py.call",
                "len(nums2)"
              ],
              179,
              [
                [
                  "py.identifier",
                  "len"
                ],
                180,
                "\"len\""
              ],
              [
                [
                  "py.argument_list",
                  "(nums2)"
                ],
                181,
                "\"(\"",
                [
                  [
                    "py.identifier",
                    "nums2"
                  ],
                  182,
                  "\"nums2\""
                ],
                "\")\""
              ]
            ]
          ]
        ]
      ],
      [
        [
          "py.expression_statement",
          "left, right = (m + n + 1) // 2, (m + n + 2) // 2"
        ],
        183,
        [
          [
            "py.assignment",
            "left, right = (m + n + 1) // 2, (m + n + 2) // 2"
          ],
          184,
          [
            [
              "py.pattern_list",
              "left, right"
            ],
            185,
            [
              [
                "py.identifier",
                "left"
              ],
              186,
              "\"left\""
            ],
            "\",\"",
            [
              [
                "py.identifier",
                "right"
              ],
              187,
              "\"right\""
            ]
          ],
          "\"=\"",
          [
            [
              "py.expression_list",
              "(m + n + 1) // 2, (m + n + 2) // 2"
            ],
            188,
            [
              [
                "py.binary_operator",
                "(m + n + 1) // 2"
              ],
              189,
              [
                [
                  "py.parenthesized_expression",
                  "(m + n + 1)"
                ],
                190,
                "\"(\"",
                [
                  [
                    "py.binary_operator",
                    "m + n + 1"
                  ],
                  191,
                  [
                    [
                      "py.binary_operator",
                      "m + n"
                    ],
                    192,
                    [
                      [
                        "py.identifier",
                        "m"
                      ],
                      193,
                      "\"m\""
                    ],
                    "\"+\"",
                    [
                      [
                        "py.identifier",
                        "n"
                      ],
                      194,
                      "\"n\""
                    ]
                  ],
                  "\"+\"",
                  [
                    [
                      "py.integer",
                      "1"
                    ],
                    195,
                    "\"1\""
                  ]
                ],
                "\")\""
              ],
              "\"//\"",
              [
                [
                  "py.integer",
                  "2"
                ],
                196,
                "\"2\""
              ]
            ],
            "\",\"",
            [
              [
                "py.binary_operator",
                "(m + n + 2) // 2"
              ],
              197,
              [
                [
                  "py.parenthesized_expression",
                  "(m + n + 2)"
                ],
                198,
                "\"(\"",
                [
                  [
                    "py.binary_operator",
                    "m + n + 2"
                  ],
                  199,
                  [
                    [
                      "py.binary_operator",
                      "m + n"
                    ],
                    200,
                    [
                      [
                        "py.identifier",
                        "m"
                      ],
                      201,
                      "\"m\""
                    ],
                    "\"+\"",
                    [
                      [
                        "py.identifier",
                        "n"
                      ],
                      202,
                      "\"n\""
                    ]
                  ],
                  "\"+\"",
                  [
                    [
                      "py.integer",
                      "2"
                    ],
                    203,
                    "\"2\""
                  ]
                ],
                "\")\""
              ],
              "\"//\"",
              [
                [
                  "py.integer",
                  "2"
                ],
                204,
                "\"2\""
              ]
            ]
          ]
        ]
      ],
      [
        [
          "py.return_statement",
          "return (findKth(0, 0, left) + findKth(0, 0, right)) / 2"
        ],
        205,
        "\"return\"",
        [
          [
            "py.binary_operator",
            "(findKth(0, 0, left) + findKth(0, 0, right)) / 2"
          ],
          206,
          [
            [
              "py.parenthesized_expression",
              "(findKth(0, 0, left) + findKth(0, 0, right))"
            ],
            207,
            "\"(\"",
            [
              [
                "py.binary_operator",
                "findKth(0, 0, left) + findKth(0, 0, right)"
              ],
              208,
              [
                [
                  "py.call",
                  "findKth(0, 0, left)"
                ],
                209,
                [
                  [
                    "py.identifier",
                    "findKth"
                  ],
                  210,
                  "\"findKth\""
                ],
                [
                  [
                    "py.argument_list",
                    "(0, 0, left)"
                  ],
                  211,
                  "\"(\"",
                  [
                    [
                      "py.integer",
                      "0"
                    ],
                    212,
                    "\"0\""
                  ],
                  "\",\"",
                  [
                    [
                      "py.integer",
                      "0"
                    ],
                    213,
                    "\"0\""
                  ],
                  "\",\"",
                  [
                    [
                      "py.identifier",
                      "left"
                    ],
                    214,
                    "\"left\""
                  ],
                  "\")\""
                ]
              ],
              "\"+\"",
              [
                [
                  "py.call",
                  "findKth(0, 0, right)"
                ],
                215,
                [
                  [
                    "py.identifier",
                    "findKth"
                  ],
                  216,
                  "\"findKth\""
                ],
                [
                  [
                    "py.argument_list",
                    "(0, 0, right)"
                  ],
                  217,
                  "\"(\"",
                  [
                    [
                      "py.integer",
                      "0"
                    ],
                    218,
                    "\"0\""
                  ],
                  "\",\"",
                  [
                    [
                      "py.integer",
                      "0"
                    ],
                    219,
                    "\"0\""
                  ],
                  "\",\"",
                  [
                    [
                      "py.identifier",
                      "right"
                    ],
                    220,
                    "\"right\""
                  ],
                  "\")\""
                ]
              ]
            ],
            "\")\""
          ],
          "\"/\"",
          [
            [
              "py.integer",
              "2"
            ],
            221,
            "\"2\""
          ]
        ]
      ]
    ]
  ]
]