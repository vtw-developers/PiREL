[
  "for i, item in enumerate(my_list):\n    print(i, item)",
  "for index, element in enumerate(['apple', 'banana', 'cherry']):\n    print('Index:', index, 'Element:', element)",
  "for i, _ in enumerate(range(10)):\n    if i == 5:\n        break",
  "for idx, value in enumerate({\"first\": 1, \"second\": 2}):\n    print(idx, value)",
  "for _, fruit in enumerate(('apple', 'banana', 'cherry')):\n    print('Fruit:', fruit)",
  "for i, value in enumerate(nums):\n    print(i, value)",
  "for _ in enumerate([1, 2, 3, 4, 5]):\n    print(_)",
  "for idx, num in enumerate(map(int, input().split())):\n    print(idx, num)",
  "for idx, num in enumerate([1, 2, 3, 4, 5]):\n    if num % 2 == 0:\n        continue\n    else:\n        print(num)",
  "for i, val in enumerate(list_vals):\n    print(i, val)",
  "for i, val in enumerate([1, 2, 3, 4, 5]):\n    print(i, val)",
  "for i, val in enumerate(range(5)):\n    print(i, val)",
  "for i, val in enumerate(numbers):\n    if val > 5:\n        break\n    else:\n        print(i, val)",
  "for i, val in enumerate(nums):\n    print(val)",
  "for i in enumerate([1, 2, 3, 4, 5]):\n    print(i)",
  "for i in enumerate(range(10)):\n    print(i)",
  "for i, val in enumerate(nums):\n    if val > 5:\n        print(val)",
  "for i, val in enumerate(nums):\n    if i > 5:\n        break",
  "def func(nums):\n    for i, val in enumerate(nums):\n        if val > 5:\n            return i",
  "for i, val in enumerate(nums):\n    if val < 5:\n        continue\n    print(val)",
  "for i, val in enumerate([1, 2, 3, 4, 5]):\n    print(val)",
  "for i, key in enumerate({'a': 1, 'b': 2, 'c': 3}):\n    print(key)",
  "class Sample:\n    def __init__(self):\n        self.attr1 = 1\n        self.attr2 = 2\n\nobj = Sample()\n\nfor i, attr in enumerate(vars(obj)):\n    print(attr)",
  "for i, value in enumerate(my_list):\n    print(i, value)",
  "for i, value in enumerate([1, 2, 3, 4]):\n    print(value)",
  "for i, value in enumerate(get_list()):\n    if value is None: continue",
  "for i, value in enumerate(get_dict().items()):\n    if value[1] > threshold: break",
  "for index, value in enumerate([1, 2, 3, 4, 5]):\n    if index == value: print(\"Match!\")",
  "for index, value in enumerate(my_object.get_values()):\n    if value > limit: return False"
]
