def test():
  "--- test function ---"
  param =[('(0(5(6()())(4()(9()())))(7(1()())(3()())))', 2,),('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))', 3,),('(0(5(6()())(4()(9()())))(7(1()())(3()())))', 1,),('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))', 2,),('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))', 4,),('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))', 100,),('(0(5(6()())(4()(9()())))(7(1()())(3()())))', 3,),('(0(5(6()())(4()(9()())))(7(1()())(3()())))', 0,),('0010', 12,),('kjtdgmy', 97,)]
  for i, parameters_set in enumerate(param):
    idx = i
    result = f_gold(* parameters_set)
"-----------------"
def f_gold(tree, k):
  level = - 1
  product = 1
  n = len(tree)
  for i in range(0, n):
    if(tree[i] == '('): level += 1
    elif(tree[i] == ')'): level -= 1
    else:
      if(level == k): product *=(int(tree[i])- int('0'))
  return product
"-----------------"
test()
