(match_expand 
  (fragment ("py.module" "*"))
  (fragment ("js.program" "*1")))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na //= 4\na.b //= c\n\n### JavaScript\n\na = Math.floor(a / 4);\na.b = Math.floor(a.b / c);\n\n"
(match_expand
  (fragment ("py.expression_statement" ("py.augmented_assignment" "." (str "//=") ".")) "*")
  (fragment ("js.expression_statement" ("js.assignment_expression" ".1" (str "=") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "floor"))) ("js.arguments" (str "(") ("js.binary_expression" ".1" (str "/") ("js.parenthesized_expression" (str "(") ".2" (str ")"))) (str ")"))))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na += 1\na[b] += 1\n\n### JavaScript\n\na++;\na[b]++;\n\n"
; mark: {"source":[[4,0,4,6],[5,0,5,9]],"target":[[9,0,9,3],[10,0,10,6]]}
(match_expand 
  (fragment ("py.expression_statement" ("py.augmented_assignment" "." (str "+=") ("py.integer" (val "1")))) "*")
  (fragment ("js.expression_statement" ("js.update_expression" ".1" (str "++"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na += b\na[b] += []\n\n### JavaScript\n\na = a.concat(b);\na[b] = a[b].concat([]);\n\n"
; mark: {"source":[[4,0,4,6],[5,0,5,10]],"target":[[9,0,9,15],[10,0,10,22]]}
(match_expand 
  (fragment ("py.expression_statement" ("py.augmented_assignment" "." (str "+=") ".")) "*")
  (fragment ("js.expression_statement" ("js.assignment_expression" ".1" (str "=") ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "concat"))) ("js.arguments" (str "(") ".2" (str ")"))))) "*3")
)

(match_expand
  (fragment ("py.expression_statement" ("py.augmented_assignment" "." "_str_" ".")) "*")
  (fragment ("js.expression_statement" ("js.augmented_assignment_expression" ".1" "_str1_" ".2")) "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\ni2 = i3 = i5 = 0\n[a, b] = [c, d] = [e, f] = [0, 0]\n\n### JavaScript\n\nlet i5 = 0, i3 = i5, i2 = i3;\nlet [e, f] = [0, 0], [c, d] = [e, f], [a, b] = [c, d];\n\n\n"
; mark: {"source":[[4,0,4,16],[5,0,5,33]],"target":[[9,0,9,28],[10,0,10,53]]}
(match_expand 
  (fragment ("py.expression_statement" ("py.assignment" "." (str "=") ("py.assignment" "." (str "=") ("py.assignment" "." (str "=") ".")))) "*")
  (fragment ("js.lexical_declaration" (str "let") ("js.variable_declarator" ".3" (str "=") ".4") (str ",") ("js.variable_declarator" ".2" (str "=") ".3") (str ",") ("js.variable_declarator" ".1" (str "=") ".2") (str ";")) "*5")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na = b = c\n[a, b] = [c, d] = [e, f]\n\n### JavaScript\n\nlet b = c; let a = 2;\nlet [c, d] = [e, f]; let [a, b] = [c, d];\n\n\n"
(match_expand
  (fragment ("py.expression_statement" ("py.assignment" "." ("py.assignment" "." "."))) "*")
  (fragment ("js.lexical_declaration"  ("js.variable_declarator" ".2" ".3")) ("js.lexical_declaration"  ("js.variable_declarator" ".1" ".2")) "*4"))

(match_expand
  (fragment ("py.expression_statement" "*") "*")
  (fragment ("js.expression_statement" "*1") "*2"))

(match_expand
  (fragment ("py.expression_statement" "*") "*")
  (fragment ("js.lexical_declaration" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass AAA(DDD):\n  a = 1\n  c = hi()\n\n### JavaScript\n\nclass AAA extends DDD {\n    a = 1;\n    c = hi();\n}\n\n\n"
; mark: {"source":[[5,2,5,7],[6,2,6,10]],"target":[[11,4,11,9],[12,4,12,12]]}
(match_expand 
  (fragment ("py.expression_statement" ("py.assignment" ("py.identifier" "_val_") (str "=") ".")) "*")
  (fragment ("js.field_definition" (nostr) ("js.property_identifier" "_val1_") (str "=") ".1") "*2")
)

(match_expand
  (fragment ("py.assignment" ("py.pattern_list" "*")  ("py.expression_list" "*")) "*")
  (fragment ("js.variable_declarator" ("js.array_pattern" "*1")  ("js.array" "*2")) "*3")
)

(match_expand
  (fragment ("py.assignment" ("py.pattern_list" "*")  ("py.expression_list" "*")) "*")
  (fragment ("js.assignment_expression" ("js.array_pattern" "*1")  ("js.array" "*2")) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na[k:] = [1,2,3]\na.b[4:] = c\n\n### JavaScript\n\na.splice(k, Infinity, ...[1,2,3]);\na.b.splice(4, Infinity, ...c);\n\n"
; mark: {"source":[[4,0,4,15],[5,0,5,11]],"target":[[9,0,9,26],[10,0,10,22]]}
(match_expand 
  (fragment ("py.assignment" ("py.subscript" "." (str "[") ("py.slice" (nostr) "." (str ":") (nostr)) (str "]")) (str "=") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "splice"))) ("js.arguments" (str "(") ".2" (str ",") ("js.identifier" (val "Infinity")) (str ",") ("js.spread_element" (str "...") ".3") (str ")"))) "*4")
)

(match_expand
  (fragment ("py.assignment" "*") "*")
  (fragment ("js.assignment_expression" "*1") "*2"))

(match_expand
  (fragment ("py.assignment" "*") "*")
  (fragment ("js.variable_declarator" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nself\nself\n\n### JavaScript\n\nthis;\nthis;\n\n"
; mark: {"source":[[4,0,4,4],[5,0,5,4]],"target":[[9,0,9,4],[10,0,10,4]]}
(match_expand 
  (fragment ("py.identifier" (val "self")) "*")
  (fragment ("js.this" (str "this")) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nnew\n\n\n### JavaScript\n\n_new;\n\n"
; mark: {"source":[[4,0,4,3]],"target":[[9,0,9,4]]}
(match_expand 
  (fragment ("py.identifier" (val "new")) "*")
  (fragment ("js.identifier" (val "_new")) "*1")
)

(match_expand
  (fragment ("py.identifier" "_val_") "*")
  (fragment ("js.identifier" "_val1_") "*1"))

(match_expand
  (fragment ("py.integer" "_val_") "*")
  (fragment ("js.number" "_val1_") "*1"))

(match_expand
  (fragment ("py.float" "_val_") "*")
  (fragment ("js.number" "_val1_") "*1"))

(match_expand
  (fragment ("py.if_statement" ("py.parenthesized_expression" ".") "*") "*")
  (fragment ("js.if_statement" ("js.parenthesized_expression" ".1") "*2") "*3"))

(match_expand
  (fragment ("py.elif_clause" "." ".") ("py.else_clause" "."))
  (fragment ("js.else_clause" ("js.if_statement" ("js.parenthesized_expression" ".1") ".2" ("js.else_clause" ".3"))))
)

(match_expand
  (fragment ("py.elif_clause" "." ".") "*")
  (fragment ("js.else_clause" ("js.if_statement"  ("js.parenthesized_expression" ".1") ".2" "*3")))
)

(match_expand
  (fragment ("py.else_clause" "."))
  (fragment ("js.else_clause" ".1")))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nif x:\n  a = 1\n\nif res:\n  ff()\n\n### JavaScript\n\nif (x && x.length !== 0) {\n    a = 1;\n}\n\nif (res && res.length !== 0) {\n    ff();\n}\n\n"
; mark: {"source":[[4,0,5,7],[7,0,8,6]],"target":[[12,0,14,1],[16,0,18,1]]}
(match_expand 
  (fragment ("py.if_statement" (str "if") ("py.identifier" "_val_") (str ":") ("py.block" "*")) "*")
  (fragment ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" "_val1_") (str "&&") ("js.binary_expression" ("js.member_expression" ("js.identifier" "_val1_") (str ".") ("js.property_identifier" (val "length"))) (str "!==") ("js.number" (val "0")))) (str ")")) ("js.statement_block" (str "{") "*1" (str "}"))) "*2")
)

(match_expand
  (fragment ("py.if_statement" "." "*") "*")
  (fragment ("js.if_statement" ("js.parenthesized_expression" ".1") "*2") "*3"))

(match_expand
  (fragment ("py.while_statement" ("py.parenthesized_expression" ".") "*") "*")
  (fragment ("js.while_statement" ("js.parenthesized_expression" ".1") "*2") "*3"))

(match_expand
  (fragment ("py.while_statement" "." "*") "*")
  (fragment ("js.while_statement" ("js.parenthesized_expression" ".1") "*2") "*3"))

(match_expand
  (fragment ("py.return_statement"  ("py.expression_list" "*")) "*")
  (fragment ("js.return_statement"  ("js.array" "*1")) "*2")
)

(match_expand
  (fragment ("py.return_statement" ".") "*")
  (fragment ("js.return_statement" ".1") "*2"))

(match_expand
  (fragment ("py.return_statement") "*")
  (fragment ("js.return_statement") "*1"))

(match_expand
  (fragment ("py.parenthesized_expression" "*") "*")
  (fragment ("js.parenthesized_expression" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nprint(a, end=\"\")\n\n### JavaScript\n\nconsole.log(a)\n\n"
(match_expand
  (fragment ("py.keyword_argument" ("py.identifier" (val "end")) ".") "*")
  (fragment "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nprint(a, sep=\"\")\n\n### JavaScript\n\nconsole.log(a)\n\n"
(match_expand
  (fragment ("py.keyword_argument" ("py.identifier" (val "sep")) ".") "*")
  (fragment "*2")
)

(match_expand
  (fragment ("py.argument_list" "*") "*")
  (fragment ("js.arguments" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na == 1\n2 == b\n\n### JavaScript\n\na === 1;\n2 === b;\n\n"
(match_expand
  (fragment ("py.comparison_operator" "." (str "==") ".") "*")
  (fragment ("js.binary_expression" ".1" (str "===") ".2") "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na in b.keys()\n2 in {}.keys()\n\n### JavaScript\n\na in b;\n2 in {};\n\n"
; mark: {"source":[[4,0,4,13],[5,0,5,14]],"target":[[9,0,9,6],[10,0,10,7]]}
(match_expand 
  (fragment ("py.comparison_operator" "." (str "in") ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "keys"))) ("py.argument_list" (str "(") (str ")")))) "*")
  (fragment ("js.binary_expression" ".1" (str "in") ".2") "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na not in b.keys()\n2 not in {}.keys()\n\n### JavaScript\n\n!(a in b);\n!(2 in {});\n\n"
; mark: {"source":[[4,0,4,13],[5,0,5,14]],"target":[[9,0,9,6],[10,0,10,7]]}
(match_expand 
  (fragment ("py.comparison_operator" "." (str "not") (str "in") ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "keys"))) ("py.argument_list" (str "(") (str ")")))) "*")
  (fragment ("js.unary_expression" (str "!") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ".1" (str "in") ".2") (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na in b\n2 in []\n\n### JavaScript\n\nb.indexOf(a) >= 0;\n[].indexOf(2) >= 0;\n\n"
(match_expand
  (fragment ("py.comparison_operator" "." (str "in") ".") "*")
  (fragment ("js.binary_expression" ("js.call_expression" ("js.member_expression" ".2" (str ".") ("js.property_identifier" (val "indexOf"))) ("js.arguments" (str "(") ".1" (str ")"))) (str ">=") ("js.number" (val "0"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na in b\n1 in set()\n\n### JavaScript\n\nb.has(a);\nset().has(1);\n"
; mark: {"source":[[4,0,4,6],[5,0,5,10]],"target":[[9,0,9,8],[10,0,10,12]]}
(match_expand 
  (fragment ("py.comparison_operator" "." (str "in") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ".2" (str ".") ("js.property_identifier" (val "has"))) ("js.arguments" (str "(") ".1" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na in b\n2 in {}\n\n### JavaScript\n\n(a in b);\n(2 in {});\n\n"
(match_expand
  (fragment ("py.comparison_operator" "." (str "in") ".") "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.binary_expression" ".1" (str "in") ".2") (str ")")) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na not in b\n2 not in []\n\n### JavaScript\n\n!(b.indexOf(a) >= 0);\n!([].indexOf(2) >= 0);\n\n"
(match_expand
  (fragment ("py.comparison_operator" "." (str "not") (str "in") ".") "*")
  (fragment ("js.unary_expression" (str "!") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.call_expression" ("js.member_expression" ".2" (str ".") ("js.property_identifier" (val "indexOf"))) ("js.arguments" (str "(") ".1" (str ")"))) (str ">=") ("js.number" (val "0"))) (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na not in b\n1 not in set()\n\n### JavaScript\n\n(!b.has(a));\n(!set().has(1));\n"
; mark: {"source":[[4,0,4,6],[5,0,5,10]],"target":[[9,0,9,8],[10,0,10,12]]}
(match_expand 
  (fragment ("py.comparison_operator" "." (str "not") (str "in") ".") "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.call_expression" ("js.member_expression" ".2" (str ".") ("js.property_identifier" (val "has"))) ("js.arguments" (str "(") ".1" (str ")")))) (str ")")) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na not in b\n2 not in {}\n\n### JavaScript\n\n!(a in b);\n!(2 in {});\n\n"
(match_expand
  (fragment ("py.comparison_operator" "." (str "not") (str "in") ".") "*")
  (fragment ("js.unary_expression" (str "!") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ".1" (str "in") ".2") (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na is not 4\n6 is not d\n\n### JavaScript\n\na !== 4;\n6 !== d;\n\n"
; mark: {"source":[[4,0,4,6],[5,0,5,6]],"target":[[9,0,9,7],[10,0,10,7]]}
(match_expand 
  (fragment ("py.comparison_operator" "." (str "is") (str "not") ".") "*")
  (fragment ("js.binary_expression" ".1" (str "!==") ".2") "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na is 4\n6 is d\n\n### JavaScript\n\na === 4;\n6 === d;\n\n"
; mark: {"source":[[4,0,4,6],[5,0,5,6]],"target":[[9,0,9,7],[10,0,10,7]]}
(match_expand 
  (fragment ("py.comparison_operator" "." (str "is") (nostr) ".") "*")
  (fragment ("js.binary_expression" ".1" (str "===") ".2") "*3")
)

(match_expand
  (fragment ("py.comparison_operator" "." "_str_" ".") "*")
  (fragment ("js.binary_expression" ".1" "_str1_" ".2") "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na < b < c\n1 <= 2 < 3\n\n### JavaScript\n\na < b && b < c;\n1 <= 2 && 2 < 3;\n\n"
; mark: {"source":[[4,0,4,9],[5,0,5,11]],"target":[[9,0,9,14],[10,0,10,16]]}
(match_expand 
  (fragment ("py.comparison_operator" "." "_str_" "." "_str_" ".") "*")
  (fragment ("js.binary_expression" ("js.binary_expression" ".1" "_str1_" ".2") (str "&&") ("js.binary_expression" ".2" "_str2_" ".3")) "*4")
)

(match_expand
  (fragment ("py.block" "*") "*")
  (fragment ("js.statement_block" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na + b\n\"hi\" + \"hello\"\n\n### JavaScript\n\na.concat(b);\n\"hi\".concat(\"hello\");\n\n"
; mark: {"source":[[4,0,4,5],[5,0,5,14]],"target":[[9,0,9,11],[10,0,10,20]]}
(match_expand 
  (fragment ("py.binary_operator" "." (str "+") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "concat"))) ("js.arguments" (str "(") ".2" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na // b\n2 // 3\n\n### JavaScript\n\nMath.floor(a / b);\nMath.floor(2 / 3);\n\n"
(match_expand
  (fragment ("py.binary_operator" "." (str "//") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "floor"))) ("js.arguments" (str "(") ("js.binary_expression" ".1" (str "/") ".2") (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\nprint(\"hi\" * 5)\nprint(\"hello\" * x)\n\n### JavaScript\nconsole.log(Array(5 + 1).join(\"hi\"));\nconsole.log(Array(x + 1).join(\"hello\"));"
; mark: {"source":[[3,6,3,14],[4,6,4,17]],"target":[[7,12,7,35],[8,12,8,38]]}
(match_expand 
  (fragment ("py.binary_operator" ("py.string" ".") (str "*") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" (str "(") ("js.binary_expression" ".2" (str "+") ("js.number" (val "1"))) (str ")"))) (str ".") ("js.property_identifier" (val "join"))) ("js.arguments" (str "(") ("js.string" ".1") (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n\"\" * 4\n\"hi\" * a\n\n### JavaScript\n\nArray(4 + 1).join(\"\");\nArray(a + 1).join(\"hi\");\n\n"
(match_expand
  (fragment ("py.binary_operator" ("py.list" (str "[") "." (str "]")) (str "*") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" (str "(") ".2" (str ")"))) (str ".") ("js.property_identifier" (val "fill"))) ("js.arguments" (str "(") ".1" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n4 * \"\"\na * \"hi\"\n\n### JavaScript\n\nArray(4 + 1).join(\"\");\nArray(a + 1).join(\"hi\");\n\n"
(match_expand
  (fragment ("py.binary_operator" "." (str "*") ("py.list" (str "[") "." (str "]"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" (str "(") ".1" (str ")"))) (str ".") ("js.property_identifier" (val "fill"))) ("js.arguments" (str "(") ".2" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n[\"a\"] * 4 * b\n[5] * a * 2\n\n### JavaScript\n\nArray(4 * b).fill(\"a\");\nArray(a * 2).fill(5);\n\n"
; mark: {"source":[[4,0,4,13],[5,0,5,11]],"target":[[9,0,9,22],[10,0,10,20]]}
(match_expand 
  (fragment ("py.binary_operator" ("py.binary_operator" ("py.list" (str "[") "." (str "]")) (str "*") ".") (str "*") ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" (str "(") ("js.binary_expression" ".2" (str "*") ".3") (str ")"))) (str ".") ("js.property_identifier" (val "fill"))) ("js.arguments" (str "(") ".1" (str ")"))) "*4")
)

(match_expand
  (fragment ("py.binary_operator" "." "_str_" ".") "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.binary_expression" ".1" "_str1_" ".2") (str ")")) "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na and b\nTrue and False\n\n### JavaScript\n\na && b;\ntrue && false;\n\n"
(match_expand
  (fragment ("py.boolean_operator" "." (str "and") ".") "*")
  (fragment ("js.binary_expression" ".1" (str "&&") ".2") "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na or b\nTrue or False\n\n### JavaScript\n\na || b;\ntrue || false;\n\n"
(match_expand
  (fragment ("py.boolean_operator" "." (str "or") ".") "*")
  (fragment ("js.binary_expression" ".1" (str "||") ".2") "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nnot x\nnot True\n\n### JavaScript\n\n!(x)\n!(True)\n\n"
(match_expand
  (fragment ("py.not_operator" (str "not") ".") "*")
  (fragment ("js.unary_expression" (str "!") ("js.parenthesized_expression" (str "(") ".1" (str ")"))) "*2")
)

(match_expand
  (fragment ("py.unary_operator" "_str_" ".") "*")
  (fragment ("js.unary_expression" "_str1_" ".1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in range(10): pass\nfor y in range(a): a = 1\n\n### JavaScript\n\nfor (let x = 0; x < 10; x++) {}\nfor (let y = 0; y < a; y++) {a = 1;}\n\n"
(match_expand
  (fragment ("py.for_statement" "." 
    ("py.call" ("py.identifier" (val "range")) ("py.argument_list" ".")) "*") "*")
  (fragment ("js.for_statement" 
    ("js.lexical_declaration" ("js.variable_declarator" ".1" ("js.number" (val 0)))) 
    ("js.expression_statement" ("js.binary_expression" ".1" (str "<") ".2")) 
    ("js.update_expression" ".1") "*3") "*4"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in range(2, 10): pass\nfor y in range(a, b): a = 1\n\n### JavaScript\n\nfor (let x = 2; x < 10; x++) {}\nfor (let y = a; y < b; y++) {a = 1;}\n\n"
(match_expand
  (fragment ("py.for_statement" "." 
    ("py.call" ("py.identifier" (val "range")) ("py.argument_list" "." ".")) "*") "*")
  (fragment ("js.for_statement" 
    ("js.lexical_declaration" ("js.variable_declarator" ".1" ".2")) 
    ("js.expression_statement" ("js.binary_expression" ".1" (str "<") ".3")) 
    ("js.update_expression" ".1") "*4") "*5"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in range(2, 10, -a): pass\nfor y in range(a, b, -1): a = 1\n\n### JavaScript\n\nfor (let x = 2; x < 10; x-=a) {}\nfor (let y = a; y < b; y-=1) {a = 1;}\n\n"
(match_expand
  (fragment ("py.for_statement" "." 
    ("py.call" ("py.identifier" (val "range")) ("py.argument_list" "." "." ("py.unary_operator" (str "-") "."))) "*") "*")
  (fragment ("js.for_statement" 
    ("js.lexical_declaration" ("js.variable_declarator" ".1" ".2")) 
    ("js.expression_statement" ("js.binary_expression" ".1" (str ">") ".3")) 
    ("js.augmented_assignment_expression" ".1" (str "-=") ".4") "*5") "*6"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in range(2, 10, a): pass\nfor y in range(a, b, 1): a = 1\n\n### JavaScript\n\nfor (let x = 2; x < 10; x+=a) {}\nfor (let y = a; y < b; y+=1) {a = 1;}\n\n"
(match_expand
  (fragment ("py.for_statement" "." 
    ("py.call" ("py.identifier" (val "range")) ("py.argument_list" "." "." ".")) "*") "*")
  (fragment ("js.for_statement" 
    ("js.lexical_declaration" ("js.variable_declarator" ".1" ".2")) 
    ("js.expression_statement" ("js.binary_expression" ".1" (str "<") ".3")) 
    ("js.augmented_assignment_expression" ".1" (str "+=") ".4") "*5") "*6"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in itertools.count(): pass\nfor y in itertools.count(): break\n\n### JavaScript\n\nfor (let x = 0; ; x++) {}\nfor (let y = 0; ; y++) {break;}\n\n"
(match_expand
  (fragment ("py.for_statement" (str "for") "." (str "in") 
      ("py.call" ("py.attribute" ("py.identifier" (val "itertools")) (str ".") ("py.identifier" (val "count"))) ("py.argument_list" (str "(") (str ")"))) (str ":") 
    ".") 
  "*")
  (fragment ("js.for_statement" (str "for") (str "(") 
      ("js.lexical_declaration" (str "let") ("js.variable_declarator" ".1" (str "=") ("js.number" (val "0"))) (str ";")) 
      ("js.empty_statement" (str ";")) 
      ("js.update_expression" ".1" (str "++")) (str ")") 
    ".2") 
  "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in y: pass\nfor y in []: break\n\n### JavaScript\n\nfor(let x of y) {}\nfor(let y of []) {break;}\n\n"
(match_expand
  (fragment ("py.for_statement"  "." "." ".") "*")
  (fragment ("js.for_in_statement" (str "for") (str "(") (str "let") ".1" (str "of") ".2" ".3") "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfor x in y: pass\nfor y in {}: break\n\n### JavaScript\n\nfor(let x in y) {}\nfor(let y in {}) {break;}\n\n"
(match_expand
  (fragment ("py.for_statement"  "." "." ".") "*")
  (fragment ("js.for_in_statement" (str "for") (str "(") (str "let") ".1" (str "in") ".2" ".3") "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\narr[a:b:-1]\nf()[4:2:-1]\n\n### JavaScript\n\narr.slice(b+1,a+1).reverse()\nf().slice(2+1,4+1).reverse()\n\n\n"
; mark: {"source":[[4,0,4,11],[5,0,5,11]],"target":[[9,0,9,28],[10,0,10,28]]}
(match_expand 
  (fragment ("py.subscript" "." (str "[") ("py.slice" "." (str ":") "." (str ":") ("py.unary_operator" (str "-") ("py.integer" (val "1")))) (str "]")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "slice"))) ("js.arguments" (str "(") ("js.binary_expression" ".3" (str "+") ("js.number" (val "1"))) (str ",") ("js.binary_expression" ".2" (str "+") ("js.number" (val "1"))) (str ")"))) (str ".") ("js.property_identifier" (val "reverse"))) ("js.arguments" (str "(") (str ")"))) "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na[2:]\n[][a:]\n\n### JavaScript\n\na.slice(2);\n[].slice(a);\n\n"
(match_expand
  (fragment ("py.subscript" "." (str "[") ("py.slice" (nostr) "." (str ":")) (str "]")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "slice"))) ("js.arguments" (str "(") ".2" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na[2:3]\n[][a:b]\n\n### JavaScript\n\na.slice(2,3);\n[].slice(a,b);\n\n"
(match_expand
  (fragment ("py.subscript" "."  ("py.slice" (nostr) "." (str ":") (nostr) ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1"  ("js.property_identifier" (val "slice"))) ("js.arguments"  ".2" ".3")) "*4")
)

; note: "1234567".split("").slice(1).filter((x,idx) => idx % 2 == 0).join("")
; note: [1,2,3,4,5,6].slice(1).filter((x,idx) => idx % 2 == 0)
; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na[::-1]\n[][::-b]\n\n### JavaScript\n\na.slice().reverse().filter((x, idx) => idx % 1 === 0);\n[].slice().reverse().filter((x, idx) => idx % b === 0);\n"
(match_expand
  (fragment ("py.subscript" "."  ("py.slice" (str ":") (str ":") ("py.unary_operator" (str "-") "."))) "*")
  (fragment ("js.call_expression" 
    ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ".1"  ("js.property_identifier" (val "slice"))) ("js.arguments"  ))  ("js.property_identifier" (val "reverse"))) ("js.arguments"))  ("js.property_identifier" (val "filter"))) 
    ("js.arguments"  ("js.arrow_function" (nostr) ("js.formal_parameters"  ("js.identifier" (val "x"))  ("js.identifier" (val "idx")) (str ")"))  ("js.binary_expression" ("js.binary_expression" ("js.identifier" (val "idx")) (str "%")  ".2") (str "===")  ("js.number" (val "0")))))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nstr[::-1]\n\"123\"[::-1]\n\n### JavaScript\n\nArray.from(str).reverse().join(\"\");\nArray.from(\"123\").reverse().join(\"\");\n\n"
; mark: {"source":[[4,0,4,9],[5,0,5,11]],"target":[[9,0,9,32],[10,0,10,34]]}
(match_expand 
  (fragment ("py.subscript" "." (str "[") ("py.slice" (str ":") (str ":") ("py.unary_operator" (str "-") ("py.integer" (val "1")))) (str "]")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ".1" (str ")"))) (str ".") ("js.property_identifier" (val "reverse"))) ("js.arguments" (str "(") (str ")"))) (str ".") ("js.property_identifier" (val "join"))) ("js.arguments" (str "(") ("js.string") (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na[:2]\n[][:a]\n\n### JavaScript\n\na.slice(0,2);\n[].slice(0,a);\n\n"
(match_expand
  (fragment ("py.subscript" "."  ("py.slice" (str ":") (nostr) ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1"  ("js.property_identifier" (val "slice"))) ("js.arguments"  ("js.number" (val "0")) ".2")) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na[-1]\nb[-2]\n\n### JavaScript\n\na[a.length - 1]\nb[b.length - 2]\n\n"
; mark: {"source":[[4,0,4,5],[5,0,5,5]],"target":[[9,0,9,15],[10,0,10,15]]}
(match_expand 
  (fragment ("py.subscript" "." (str "[") ("py.unary_operator" (str "-") ("py.integer" "_val_")) (str "]")) "*")
  (fragment ("js.subscript_expression" ".1" (str "[") ("js.binary_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "length"))) (str "-") ("js.number" "_val1_")) (str "]")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nb_bin[0]\nb_bin[-i]\n\n### JavaScript\n\nb_bin[((0) + b_bin.length) % b_bin.length];\nb_bin[((-i) + b_bin.length) % b_bin.length];\n\n"
; mark: {"source":[[4,0,4,8],[5,0,5,9]],"target":[[9,0,9,42],[10,0,10,43]]}
(match_expand 
  (fragment ("py.subscript" ("py.identifier" (val "b_bin")) (str "[") (nostr) "." (str "]")) "*")
  (fragment ("js.subscript_expression" ("js.identifier" (val "b_bin")) (str "[") ("js.binary_expression" ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.parenthesized_expression" (str "(") ".1" (str ")")) (str "+") ("js.member_expression" ("js.identifier" (val "b_bin")) (str ".") ("js.property_identifier" (val "length")))) (str ")")) (str "%") ("js.member_expression" ("js.identifier" (val "b_bin")) (str ".") ("js.property_identifier" (val "length")))) (str "]")) "*2")
)

(match_expand
  (fragment ("py.subscript" "." (str "[") (nostr) ".") "*")
  (fragment ("js.subscript_expression" ".1" (str "[") (nostr) ".2") "*3"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.pi\n\n### JavaScript\n\nMath.PI;\n\n"
(match_expand
  (fragment ("py.attribute" ("py.identifier" (val "math"))  ("py.identifier" (val "pi"))) "*")
  (fragment ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "PI"))) "*1"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.e\n\n### JavaScript\n\nMath.E;\n\n"
(match_expand
  (fragment ("py.attribute" ("py.identifier" (val "math"))  ("py.identifier" (val "e"))) "*")
  (fragment ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "E"))) "*1"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.inf\n\n### JavaScript\n\nInfinity;\n\n"
; mark: {"source":[[4,0,4,8]],"target":[[8,0,8,8]]}
(match_expand 
  (fragment ("py.attribute" ("py.identifier" (val "math")) (str ".") ("py.identifier" (val "inf"))) "*")
  (fragment ("js.identifier" (val "Infinity")) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nsys.float_info.max\n\n### JavaScript\n\nNumber.MAX_VALUE;\n\n"
; mark: {"source":[[4,0,4,18]],"target":[[8,0,8,16]]}
(match_expand 
  (fragment ("py.attribute" ("py.attribute" ("py.identifier" (val "sys")) (str ".") ("py.identifier" (val "float_info"))) (str ".") ("py.identifier" (val "max"))) "*")
  (fragment ("js.member_expression" ("js.identifier" (val "Number")) (str ".") ("js.property_identifier" (val "MAX_VALUE"))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nsys.maxsize\n\n### JavaScript\n\n9223372036854776000\n\n"
(match_expand
  (fragment ("py.attribute" ("py.identifier" (val "sys")) (str ".") ("py.identifier" (val "maxsize"))) "*")
  (fragment ("js.number" (val "9223372036854776000")) "*1")
)

; note: (fragment ("js.member_expression" ("js.identifier" (val "Number")) (str ".") ("js.property_identifier" (val "MAX_SAFE_INTEGER"))) "*1")
(match_expand
  (fragment ("py.attribute" "." ("py.identifier" "_val_")) "*")
  (fragment ("js.member_expression" ".1" ("js.property_identifier" "_val1_")) "*2"))


(match_expand
  (fragment ("py.true") "*")
  (fragment ("js.true") "*1"))

(match_expand
  (fragment ("py.false") "*")
  (fragment ("js.false") "*1"))

(match_expand
  (fragment ("py.string" (anno ("quote" "\"\"\"")) "*") "*")
  (fragment ("js.string" ("js.string_fragment" (val "omitted docs"))) "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nf\"\"\nf\"{hi}\"\nf\"hello{hi}\"\n\n### JavaScript\n\n``;\n`${hi}`;\n`hello${hi}`;\n\n"
; mark: {"source":[[4,0,4,3],[5,0,5,7],[6,0,6,12]],"target":[[10,0,10,2],[11,0,11,7],[12,0,12,12]]}
(match_expand 
  (fragment ("py.string" (anno ("stype" "f")) (str "\"") "*") "*")
  (fragment ("js.template_string" (str "`") "*1") "*2")
)

(match_expand
  (fragment ("py.string" "*") "*")
  (fragment ("js.string" "*1") "*2"))

(match_expand
  (fragment ("py.list" "*") "*")
  (fragment ("js.array" "*1") "*2"))

(match_expand
  (fragment ("py.tuple" "*") "*")
  (fragment ("js.array" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n{\"a\": 0}\n{3: \"c\"}\n\n### JavaScript\n\n{\"a\": 0};\n{3: \"c\"};\n\n"
; mark: {"source":[[4,1,4,7],[5,1,5,7]],"target":[[9,1,9,7],[10,1,10,7]]}
(match_expand 
  (fragment ("py.pair" "." (str ":") ".") "*")
  (fragment ("js.pair" ".1" (str ":") ".2") "*3")
)

(match_expand
  (fragment ("py.string_content" "_val_") "*")
  (fragment ("js.string_fragment" "_val1_") "*1"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nf\"hello\"\nf\"hi\"\n\n### JavaScript\n\n`hello`;\n`hi`;\n\n"
; mark: {"source":[[4,2,4,7],[5,2,5,4]],"target":[[9,1,9,6],[10,1,10,3]]}
(match_expand 
  (fragment ("py.string_content" "_val_") "*")
  (fragment ("js.template_chars" "_val1_") "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nf'{nums[i]}->{x}'\n\n### JavaScript\n\n`${nums[i]}->${x}`;\n\n"
; mark: {"source":[[4,2,4,11],[4,13,4,16]],"target":[[8,1,8,11],[8,13,8,17]]}
(match_expand 
  (fragment ("py.interpolation" (str "{") "." (str "}")) "*")
  (fragment ("js.template_substitution" (str "${") ".1" (str "}")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass AAA:\n  def __init__(self):\n    a = 1\n\nclass BBB:\n  def __init__(self, hi):\n    hi()\n\n### JavaScript\n\nclass AAA {\n    constructor() {\n        a = 1;\n    }\n}\n\nclass BBB {\n    constructor(hi) {\n        hi();\n    }\n}\n\n\n"
; mark: {"source":[[5,2,6,9],[9,2,10,8]],"target":[[15,4,17,5],[21,4,23,5]]}
(match_expand 
  (fragment ("py.function_definition" (str "def") ("py.identifier" (val "__init__")) ("py.parameters" (str "(") ("py.identifier" (val "self")) "*") (str ":") ("py.block" "*")) "*")
  (fragment ("js.method_definition" (nostr) ("js.property_identifier" (val "constructor")) ("js.formal_parameters" (str "(") "*1") ("js.statement_block" (str "{") "*2" (str "}"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass classA:\n  def __iter__(self):\n    a = 1\n\nclass classB:\n  def __iter__(self):\n    yield 1\n\n### JavaScript\n\nclass classA {\n    *[Symbol.iterator]() {\n        a = 1;\n    }\n}\n\nclass classB {\n    *[Symbol.iterator]() {\n        yield 1;\n    }\n}\n\n"
; mark: {"source":[[5,2,6,9],[9,2,10,11]],"target":[[15,4,17,5],[21,4,23,5]]}
(match_expand 
  (fragment ("py.function_definition" (str "def") ("py.identifier" (val "__iter__")) ("py.parameters" (str "(") ("py.identifier" (val "self")) (str ")")) (str ":") ("py.block" "*")) "*")
  (fragment ("js.method_definition" (str "*") (nostr) ("js.computed_property_name" (str "[") ("js.member_expression" ("js.identifier" (val "Symbol")) (str ".") ("js.property_identifier" (val "iterator"))) (str "]")) ("js.formal_parameters" (str "(") (str ")")) ("js.statement_block" (str "{") "*1" (str "}"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass AAA:\n  def __str__(self):\n    a = 1\n\nclass BBB:\n  def __str__(self):\n    hi()\n\n### JavaScript\n\nclass AAA {\n    toString() {\n        a = 1;\n    }\n}\n\nclass BBB {\n    toString() {\n        hi();\n    }\n}\n\n\n"
; mark: {"source":[[5,2,6,9],[9,2,10,8]],"target":[[15,4,17,5],[21,4,23,5]]}
(match_expand 
  (fragment ("py.function_definition" (str "def") ("py.identifier" (val "__str__")) ("py.parameters" (str "(") ("py.identifier" (val "self")) (str ")")) (str ":") ("py.block" "*")) "*")
  (fragment ("js.method_definition" (nostr) ("js.property_identifier" (val "toString")) ("js.formal_parameters" (str "(") (str ")")) ("js.statement_block" (str "{") "*1" (str "}"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass AAA:\n  def __len__(self):\n    a = 1\n\nclass BBB:\n  def __len__(self):\n    hi()\n\n### JavaScript\n\nclass AAA {\n    size() {\n        a = 1;\n    }\n}\n\nclass BBB {\n    size() {\n        hi();\n    }\n}\n\n\n"
; mark: {"source":[[5,2,6,9],[9,2,10,8]],"target":[[15,4,17,5],[21,4,23,5]]}
(match_expand 
  (fragment ("py.function_definition" (str "def") ("py.identifier" (val "__len__")) ("py.parameters" (str "(") ("py.identifier" (val "self")) (str ")")) (str ":") ("py.block" "*")) "*")
  (fragment ("js.method_definition" (nostr) ("js.property_identifier" (val "size")) ("js.formal_parameters" (str "(") (str ")")) ("js.statement_block" (str "{") "*1" (str "}"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass AAA(DDD):\n  def hi(self):\n    a = 1\n  def bh(self, lala):\n    lala()\n\n### JavaScript\n\nclass AAA extends DDD {\n    hi() {\n        a = 1;\n    };\n    bh(lala) {\n        lala();\n    } \n}\n\n\n"
; mark: {"source":[[5,2,6,9],[7,2,8,10]],"target":[[13,4,15,5],[16,4,18,5]]}
(match_expand 
  (fragment ("py.function_definition" (str "def") ("py.identifier" "_val_") ("py.parameters" (str "(") ("py.identifier" (val "self")) "*") (str ":") ("py.block" "*")) "*")
  (fragment ("js.method_definition" (nostr) ("js.property_identifier" "_val1_") ("js.formal_parameters" (str "(") "*1") ("js.statement_block" (str "{") "*2" (str "}"))) "*3")
)

(match_expand
  (fragment ("py.function_definition" (str "def") "*") "*")
  (fragment ("js.function_declaration" (str "function") "*1") "*2"))

(match_expand
  (fragment ("py.parameters" "*") "*")
  (fragment ("js.formal_parameters" "*1") "*2"))

(match_expand
  (fragment ("py.none") "*")
  (fragment ("js.null") "*1"))

(match_expand
  (fragment ("py.continue_statement") "*")
  (fragment ("js.continue_statement") "*1"))

(match_expand
  (fragment ("py.break_statement") "*")
  (fragment ("js.break_statement") "*1"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nlen(a)\nlen([])\n\n### JavaScript\n\na.length;\n[].length;\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "len")) ("py.argument_list" ".")) "*")
  (fragment ("js.member_expression" ".1" ("js.property_identifier" (val "length"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nlist(x)\nlist([])\n\n### JavaScript\n\nArray.from(x);\nArray.from([]);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "list")) ("py.argument_list"  ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array"))  ("js.property_identifier" (val "from"))) ("js.arguments"  ".1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nprint()\nprint(\"hi\", \"good\")\n\n### JavaScript\n\nconsole.log();\nconsole.log(\"hi\", \"good\");\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "print")) ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "console"))  ("js.property_identifier" (val "log"))) ".1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nstr(x)\nstr(1)\n\n### JavaScript\n\nx.toString();\n1.toString();\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "str")) ("py.argument_list" ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" ("js.property_identifier" (val "toString"))) ("js.arguments")) "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nint(x)\nint(3.14)\n\n### JavaScript\n\nMath.trunc(x);\nMath.trunc(3.14);\n\n"
; mark: {"source":[[4,0,4,6],[5,0,5,9]],"target":[[9,0,9,13],[10,0,10,16]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "int")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "trunc"))) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\nbool(x)\nbool(6)\n\n### JavaScript\n(x ? true : false);\n(6 ? true : false);"
; mark: {"source":[[3,0,3,7],[4,0,4,7]],"target":[[7,0,7,16],[8,0,8,16]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "bool")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.ternary_expression" ".1" (str "?") ("js.true" (str "true")) (str ":") ("js.false" (str "false"))) (str ")")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfloat(inf)\n\n### JavaScript\n\nInfinity;\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "float")) ("py.argument_list" (str "(") ("py.string" ("py.string_content" (str "inf"))) (str ")"))) "*")
  (fragment ("js.identifier" (val "Infinity")) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfloat(\"-inf\")\n\n### JavaScript\n\n-Infinity;\n\n"
; mark: {"source":[[4,0,4,13]],"target":[[8,0,8,9]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "float")) ("py.argument_list" (str "(") ("py.string" ("py.string_content" (str "-inf"))) (str ")"))) "*")
  (fragment ("js.unary_expression" (str "-") ("js.identifier" (val "Infinity"))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nbin(6)\nbin(a)\n\n### JavaScript\n\n(\"0b\" + (6).toString(2));\n(\"0b\" + (a).toString(2));"
; mark: {"source":[[4,0,4,6],[5,0,5,6]],"target":[[9,0,9,24],[10,0,10,24]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "bin")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.string" (str "\"") ("js.string_fragment" (val "0b")) (str "\"")) (str "+") ("js.call_expression" ("js.member_expression" ("js.parenthesized_expression" (str "(") ".1" (str ")")) (str ".") ("js.property_identifier" (val "toString"))) ("js.arguments" (str "(") ("js.number" (val "2")) (str ")")))) (str ")")) "*2")
)


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n(ord)(x)\n(ord)(\"s\")\n\n### JavaScript\n\nx.charCodeAt(0);\n\"s\".charCodeAt(0);\n\n"
; mark: {"source":[[4,0,4,8],[5,0,5,10]],"target":[[9,0,9,15],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.parenthesized_expression" (str "(") ("py.identifier" (val "ord")) (str ")")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "charCodeAt"))) ("js.arguments" (str "(") ("js.number" (val "0")) (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nord(x)\nord(\"s\")\n\n### JavaScript\n\nx.charCodeAt(0);\n\"s\".charCodeAt(0);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "ord")) ("py.argument_list" ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "charCodeAt"))) ("js.arguments" (str "(") ("js.number" (val "0")) (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n(chr)(x)\n(chr)(4)\n\n### JavaScript\n\nString.fromCharCode(x);\nString.fromCharCode(4);\n\n"
; mark: {"source":[[4,0,4,8],[5,0,5,8]],"target":[[9,0,9,22],[10,0,10,22]]}
(match_expand 
  (fragment ("py.call" ("py.parenthesized_expression" (str "(") ("py.identifier" (val "chr")) (str ")")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "String")) (str ".") ("js.property_identifier" (val "fromCharCode"))) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nchr(x)\nchr(4)\n\n### JavaScript\n\nString.fromCharCode(x);\nString.fromCharCode(4);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "chr")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "String")) (str ".") ("js.property_identifier" (val "fromCharCode"))) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na = (int)(b)\nc = (int)(3.14) * 5\n\n### JavaScript\n\na = Number((b).toFixed());\nc = Number((3.14).toFixed()) * 5;\na = Math.floor(b);\nc = Math.floor(3.14) * 5;\n"
; mark: {"source":[[4,4,4,12],[5,4,5,15]],"target":[[11,4,11,17],[12,4,12,20]]}
(match_expand 
  (fragment ("py.call" ("py.parenthesized_expression" (str "(") ("py.identifier" (val "int")) (str ")")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "floor"))) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na = (float)(b)\nc = (float)(3.14) * 5\n\n### JavaScript\n\na = Number(b);\nc = Number(3.14) * 5;\n"
; mark: {"source":[[4,4,4,14],[5,4,5,17]],"target":[[9,4,9,13],[10,4,10,16]]}
(match_expand 
  (fragment ("py.call" ("py.parenthesized_expression" (str "(") ("py.identifier" (val "float")) (str ")")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.identifier" (val "Number")) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n\"\".join(a)\ns.join([])\n\n### JavaScript\n\na.join(\"\");\n[].join(s);\n\n"
(match_expand
  (fragment ("py.call" ("py.attribute" "."  ("py.identifier" (val "join"))) ("py.argument_list"  ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".2"  ("js.property_identifier" (val "join"))) ("js.arguments"  ".1")) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nx.istitle()\n\"hi\".istitle()\n\n### JavaScript\n\n(x[0] === x[0].toUpperCase() && x[0].toLowerCase() !== x[0].toUpperCase());\n(\"hi\"[0] === \"hi\"[0].toUpperCase() && \"hi\"[0].toLowerCase() !== \"hi\"[0].toUpperCase());\n\n"
; mark: {"source":[[4,0,4,11],[5,0,5,14]],"target":[[9,0,9,29],[10,0,10,35]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "istitle"))) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.binary_expression" ("js.subscript_expression" ".1" (str "[") ("js.number" (val "0")) (str "]")) (str "===") ("js.call_expression" ("js.member_expression" ("js.subscript_expression" ".1" (str "[") ("js.number" (val "0")) (str "]")) (str ".") ("js.property_identifier" (val "toUpperCase"))) ("js.arguments" (str "(") (str ")")))) (str "&&") ("js.binary_expression" ("js.call_expression" ("js.member_expression" ("js.subscript_expression" ".1" (str "[") ("js.number" (val "0")) (str "]")) (str ".") ("js.property_identifier" (val "toLowerCase"))) ("js.arguments" (str "(") (str ")"))) (str "!==") ("js.call_expression" ("js.member_expression" ("js.subscript_expression" ".1" (str "[") ("js.number" (val "0")) (str "]")) (str ".") ("js.property_identifier" (val "toUpperCase"))) ("js.arguments" (str "(") (str ")"))))) (str ")")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nx.isdigit();\n\"5\".isdigit();\n\n### JavaScript\n\n/^\\d+$/.test(x);\n/^\\d+$/.test(\"5\");\n\n"
; mark: {"source":[[4,0,4,11],[5,0,5,13]],"target":[[9,0,9,15],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "isdigit"))) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.regex" (str "/") ("js.regex_pattern" (val "^\\d+$")) (str "/")) (str ".") ("js.property_identifier" (val "test"))) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nsum(xs)\nsum(arr)\n\n### JavaScript\n\nxs.reduce((a, b) => a + b, 0)\narr.reduce((a, b) => a + b, 0)\n\n"
; mark: {"source":[[4,0,4,7],[5,0,5,8]],"target":[[9,0,9,29],[10,0,10,30]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "sum")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "reduce"))) ("js.arguments" (str "(") ("js.arrow_function" (nostr) ("js.formal_parameters" (str "(") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "b")) (str ")")) (str "=>") ("js.binary_expression" ("js.identifier" (val "a")) (str "+") ("js.identifier" (val "b")))) (str ",") ("js.number" (val "0")) (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\narr = sorted(arr)\ny = sorted(x)\n\n### JavaScript\n\narr = arr.slice().sort((a, b) => a - b);\ny = x.slice().sort((a, b) => a - b);\n\n"
; mark: {"source":[[4,6,4,17],[5,4,5,13]],"target":[[9,6,9,24],[10,4,10,20]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "sorted")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "slice"))) ("js.arguments" (str "(") (str ")"))) (str ".") ("js.property_identifier" (val "sort"))) ("js.arguments" (str "(") ("js.arrow_function" (nostr) ("js.formal_parameters" (str "(") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "b")) (str ")")) (str "=>") ("js.binary_expression" ("js.identifier" (val "a")) (str "-") ("js.identifier" (val "b")))) (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nreversed(x)\nreversed([])\n\n### JavaScript\n\nArray.from(x).slice().reverse();\nArray.from([]).slice().reverse();\n\n"
; mark: {"source":[[4,0,4,11],[5,0,5,12]],"target":[[9,0,9,31],[10,0,10,32]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "reversed")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ".1" (str ")"))) (str ".") ("js.property_identifier" (val "slice"))) ("js.arguments" (str "(") (str ")"))) (str ".") ("js.property_identifier" (val "reverse"))) ("js.arguments" (str "(") (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmax(a)\nmax([])\n\n### JavaScript\n\nMath.max(...a);\nMath.max(...[]);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "max")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "max"))) ("js.arguments" (str "(") ("js.spread_element" (str "...") ".1") (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmax(a,b)\nmax(1,2,c)\n\n### JavaScript\n\nMath.max(a,b);\nMath.max(1,2,c);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "max")) ("py.argument_list" (str "(") "." "." "*" (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "max"))) ("js.arguments" (str "(") ".1" ".2" "*3" (str ")"))) "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmin(a)\nmin([])\n\n### JavaScript\n\nMath.min(...a);\nMath.min(...[]);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "min")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "min"))) ("js.arguments" (str "(") ("js.spread_element" (str "...") ".1") (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmin(a,b)\nmin(1,2,c)\n\n### JavaScript\n\nMath.min(a,b);\nMath.min(1,2,c);\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "min")) ("py.argument_list" (str "(") "." "." "*" (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "min"))) ("js.arguments" (str "(") ".1" ".2" "*3" (str ")"))) "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nt1 = round(x)\nt2 = round(3.14)\n\n### JavaScript\n\nt1 = Math.round(x)\nt2 = Math.round(3.14)\n\n"
; mark: {"source":[[4,5,4,13],[5,5,5,16]],"target":[[9,5,9,18],[10,5,10,21]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "round")) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "round"))) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nt1 = round(x, 2)\nt2 = round(y, z)\n\n### JavaScript\n\nt1 = Number(x.toFixed(2))\nt2 = Number(y.toFixed(z))\n\n"
; mark: {"source":[[4,5,4,16],[5,5,5,16]],"target":[[9,5,9,25],[10,5,10,25]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "round")) ("py.argument_list" (str "(") "." (str ",") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.identifier" (val "Number")) ("js.arguments" (str "(") ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "toFixed"))) ("js.arguments" (str "(") ".2" (str ")"))) (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.sqrt(3)\nmath.sqrt(a)\n\n### JavaScript\n\nMath.sqrt(3);\nMath.sqrt(a);\n\n"
(match_expand
  (fragment ("py.call" ("py.attribute" ("py.identifier" (val "math"))  ("py.identifier" (val "sqrt"))) ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "sqrt"))) ".1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.log(3)\nmath.log(a)\n\n### JavaScript\n\nMath.log(3);\nMath.log(a);\n\n"
(match_expand
  (fragment ("py.call" ("py.attribute" ("py.identifier" (val "math"))  ("py.identifier" (val "log"))) ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "log"))) ".1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.factorial(x)\nmath.factorial(5)\n\n### JavaScript\n\n(function _factorial(x) { return x <= 0 ? 1 : x * _factorial(x - 1); })(x);\n(function _factorial(x) { return x <= 0 ? 1 : x * _factorial(x - 1); })(5);\n\n"
; mark: {"source":[[4,0,4,17],[5,0,5,17]],"target":[[9,0,9,74],[10,0,10,74]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" ("py.identifier" (val "math")) (str ".") ("py.identifier" (val "factorial"))) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.parenthesized_expression" (str "(") ("js.function" (str "function") ("js.identifier" (val "_factorial")) ("js.formal_parameters" (str "(") ("js.identifier" (val "x")) (str ")")) ("js.statement_block" (str "{") ("js.return_statement" (str "return") ("js.ternary_expression" ("js.binary_expression" ("js.identifier" (val "x")) (str "<=") ("js.number" (val "0"))) (str "?") ("js.number" (val "1")) (str ":") ("js.binary_expression" ("js.identifier" (val "x")) (str "*") ("js.call_expression" ("js.identifier" (val "_factorial")) ("js.arguments" (str "(") ("js.binary_expression" ("js.identifier" (val "x")) (str "-") ("js.number" (val "1"))) (str ")"))))) (str ";")) (str "}"))) (str ")")) ("js.arguments" (str "(") ".1" (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nmath.exp(1)\nmath.log(b)\n\n### JavaScript\n\nMath.exp(1);\nMath.log(b);\n\n"
(match_expand
  (fragment ("py.call" ("py.attribute" ("py.identifier" (val "math"))  ("py.identifier" "_val_")) ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" "_val1_")) ".1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\npow(2, 3)\npow(x, y)\n\n### JavaScript\n\nMath.pow(2, 3);\nMath.pow(x, y);\n\n\n"
; mark: {"source":[[4,0,4,9],[5,0,5,9]],"target":[[9,0,9,14],[10,0,10,14]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "pow")) ("py.argument_list" (str "(") "." (str ",") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "pow"))) ("js.arguments" (str "(") ".1" (str ",") ".2" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nabs(-3)\nabs(x)\n\n### JavaScript\n\nMath.abs(-3);\nMath.abs(x);\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "abs")) ".") "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "abs"))) ".1") "*2"))


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na = dict()\n\n### JavaScript\n\na = {};\n\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "dict")) ("py.argument_list")) "*")
  (fragment ("js.object") "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na = list()\n\n### JavaScript\n\na = [];\n\n"
; mark: {"source":[[4,4,4,10]],"target":[[8,4,8,6]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "list")) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.array" (str "[") (str "]")) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nset()\n\n### JavaScript\n\nnew Set()\n\n\n"
; mark: {"source":[[4,0,4,5]],"target":[[8,0,8,9]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "set")) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "Set")) ("js.arguments" (str "(") (str ")"))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.__contains__(x)\nset().__contains__(2)\n\n### JavaScript\n\na.has(x);\nset().has(2);\n"
; mark: {"source":[[4,0,4,17],[5,0,5,21]],"target":[[9,0,9,8],[10,0,10,12]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "__contains__"))) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "has"))) ("js.arguments" (str "(") ".2" (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nt1 = a.get(b)\nt2 = b.get(3)\n\n### JavaScript\n\nt1 = a[b];\nt2 = b[3];\n\n"
; mark: {"source":[[4,5,4,13],[5,5,5,13]],"target":[[9,5,9,9],[10,5,10,9]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "get"))) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.subscript_expression" ".1" (str "[") ".2" (str "]")) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.get(key, val)\n{}.get(1, 2)\n\n### JavaScript\n\n(key in a ? a[key] : val);\n(1 in {} ? {}[1] : 2);\n\n"
; mark: {"source":[[4,0,4,15],[5,0,5,11]],"target":[[9,0,9,25],[10,0,10,19]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "get"))) ("py.argument_list" (str "(") "." (str ",") "." (str ")"))) "*")
  (fragment ("js.parenthesized_expression" (str "(") ("js.ternary_expression" ("js.binary_expression" ".2" (str "in") ".1") (str "?") ("js.subscript_expression" ".1" (str "[") ".2" (str "]")) (str ":") ".3") (str ")")) "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nx.values()\ny.values()\n\n### JavaScript\n\nObject.keys(x).map(_x => x[_x]);\nObject.keys(y).map(_x => y[_x]);\n\n"
; mark: {"source":[[4,0,4,10],[5,0,5,10]],"target":[[9,0,9,31],[10,0,10,31]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" ("py.identifier" "_val_") (str ".") ("py.identifier" (val "values"))) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Object")) (str ".") ("js.property_identifier" (val "keys"))) ("js.arguments" (str "(") ("js.identifier" "_val1_") (str ")"))) (str ".") ("js.property_identifier" (val "map"))) ("js.arguments" (str "(") ("js.arrow_function" (nostr) ("js.identifier" (val "_x")) (str "=>") ("js.subscript_expression" ("js.identifier" "_val1_") (str "[") ("js.identifier" (val "_x")) (str "]"))) (str ")"))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nx.lower()\n\"a\".lower()\n\n### JavaScript\n\nx.toLowerCase();\n\"a\".toLowerCase();\n\n"
; mark: {"source":[[4,0,4,9],[5,0,5,11]],"target":[[9,0,9,15],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "lower"))) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "toLowerCase"))) ("js.arguments" (str "(") (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nx.upper()\n\"a\".upper()\n\n### JavaScript\n\nx.toUpperCase();\n\"a\".toUpperCase();\n\n"
; mark: {"source":[[4,0,4,9],[5,0,5,11]],"target":[[9,0,9,15],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "upper"))) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "toUpperCase"))) ("js.arguments" (str "(") (str ")"))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.append(b)\n[].append(3)\n\n### JavaScript\n\na.push(b);\n[].push(3);\n"
(match_expand
  (fragment ("py.call" ("py.attribute" "." ("py.identifier" (val "append"))) ("py.argument_list"  "." )) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" ("js.property_identifier" (val "push"))) ("js.arguments"  ".2" )) "*3")
)

; examples: "##### Translate this function from Python into JavaScript\n### Python\n\ns.remove(a)\n[].remove(4)\n\n### JavaScript\n\ns.splice(s.indexOf(a), 1);\n[].splice([].indexOf(4), 1);\n\n"
; mark: {"source":[],"target":[]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "remove"))) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "splice"))) ("js.arguments" (str "(") ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "indexOf"))) ("js.arguments" (str "(") ".2" (str ")"))) (str ",") ("js.number" (val "1")) (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.insert(i, x)\n[].insert(2, 5)\n\n### JavaScript\n\na.splice(i, 0, x);\n[].splice(2, 0, 5);"
; mark: {"source":[],"target":[]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "insert"))) ("py.argument_list" (str "(") "." (str ",") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "splice"))) ("js.arguments" (str "(") ".2" (str ",") ("js.number" (val "0")) (str ",") ".3" (str ")"))) "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.sort(reverse=True)\n[].sort(reverse=True)\n\n### JavaScript\n\na.sort((i, j) => i - j).reverse();\n[].sort((i, j) => i - j).reverse();\n"
(match_expand
  (fragment ("py.call" ("py.attribute" "."  ("py.identifier" (val "sort"))) ("py.argument_list"  ("py.keyword_argument" ("py.identifier" (val "reverse"))  ("py.true" )))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ".1" ("js.property_identifier" (val "sort"))) ("js.arguments" ("js.arrow_function" (nostr) ("js.formal_parameters"  ("js.identifier" (val "i"))  ("js.identifier" (val "j")) (str ")"))  ("js.binary_expression" ("js.identifier" (val "i")) (str "-") ("js.identifier" (val "j")))))) ("js.property_identifier" (val "reverse"))) ("js.arguments")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.sort(reverse=False)\n[].sort(reverse=False)\n\n### JavaScript\n\na.sort((i, j) => i - j);\n[].sort((i, j) => i - j);\n"
(match_expand
  (fragment ("py.call" ("py.attribute" "."  ("py.identifier" (val "sort"))) ("py.argument_list"  ("py.keyword_argument" ("py.identifier" (val "reverse"))  ("py.false" )))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" ("js.property_identifier" (val "sort"))) ("js.arguments" ("js.arrow_function" (nostr) ("js.formal_parameters"  ("js.identifier" (val "i"))  ("js.identifier" (val "j")) (str ")"))  ("js.binary_expression" ("js.identifier" (val "i")) (str "-") ("js.identifier" (val "j")))))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.sort()\n[].sort()\n\n### JavaScript\n\na.sort((i, j) => i - j);\n[].sort((i, j) => i - j);\n"
(match_expand
  (fragment ("py.call" ("py.attribute" "."  ("py.identifier" (val "sort"))) ("py.argument_list")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ".1" ("js.property_identifier" (val "sort"))) ("js.arguments" ("js.arrow_function" (nostr) ("js.formal_parameters"  ("js.identifier" (val "i"))  ("js.identifier" (val "j")) (str ")"))  ("js.binary_expression" ("js.identifier" (val "i")) (str "-") ("js.identifier" (val "j")))))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nrange(4)\nrange(x)\n\n### JavaScript\n\nArray(4).keys();\nArray(x).keys();\n"
(match_expand
  (fragment ("py.call" ("py.identifier" (val "range")) ("py.argument_list" ".")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" ".1")) ("js.property_identifier" (val "keys"))) ("js.arguments")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nrange(1, x)\nrange(y, 6)\n\n### JavaScript\n\nArray.from(Array(Math.max(x - 1, 0)).keys()).map(_x => _x + 1);\nArray.from(Array(Math.max(6 - y, 0)).keys()).map(_x => _x + y);\n\n"
; mark: {"source":[[4,0,4,11],[5,0,5,11]],"target":[[9,0,9,62],[10,0,10,62]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "range")) ("py.argument_list" (str "(") "." (str ",") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" (str "(") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "max"))) ("js.arguments" (str "(") ("js.binary_expression" ".2" (str "-") ".1") (str ",") ("js.number" (val "0")) (str ")"))) (str ")"))) (str ".") ("js.property_identifier" (val "keys"))) ("js.arguments" (str "(") (str ")"))) (str ")"))) (str ".") ("js.property_identifier" (val "map"))) ("js.arguments" (str "(") ("js.arrow_function" (nostr) ("js.identifier" (val "_x")) (str "=>") ("js.binary_expression" ("js.identifier" (val "_x")) (str "+") ".1")) (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nzip(a, b)\nzip([], [1,2])\n\n### JavaScript\n\n((a, b) => Array.from(Array(Math.min(b.length, a.length)), (_, i) => [a[i], b[i]]))(Array.from(a), Array.from(b));\n((a, b) => Array.from(Array(Math.min(b.length, a.length)), (_, i) => [a[i], b[i]]))(Array.from([]), Array.from([1,2]));\n\n\n"
; mark: {"source":[[4,0,4,9],[5,0,5,14]],"target":[[9,0,9,113],[10,0,10,118]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "zip")) ("py.argument_list" (str "(") "." (str ",") "." (str ")"))) "*")
  (fragment ("js.call_expression" ("js.parenthesized_expression" (str "(") ("js.arrow_function" (nostr) ("js.formal_parameters" (str "(") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "b")) (str ")")) (str "=>") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ("js.call_expression" ("js.identifier" (val "Array")) ("js.arguments" (str "(") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Math")) (str ".") ("js.property_identifier" (val "min"))) ("js.arguments" (str "(") ("js.member_expression" ("js.identifier" (val "b")) (str ".") ("js.property_identifier" (val "length"))) (str ",") ("js.member_expression" ("js.identifier" (val "a")) (str ".") ("js.property_identifier" (val "length"))) (str ")"))) (str ")"))) (str ",") ("js.arrow_function" (nostr) ("js.formal_parameters" (str "(") ("js.identifier" (val "_")) (str ",") ("js.identifier" (val "i")) (str ")")) (str "=>") ("js.array" (str "[") ("js.subscript_expression" ("js.identifier" (val "a")) (str "[") ("js.identifier" (val "i")) (str "]")) (str ",") ("js.subscript_expression" ("js.identifier" (val "b")) (str "[") ("js.identifier" (val "i")) (str "]")) (str "]"))) (str ")")))) (str ")")) ("js.arguments" (str "(") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ".1" (str ")"))) (str ",") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ".2" (str ")"))) (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.copy()\nb.copy()\n\n### JavaScript\n\n[...a];\n[...b];\n\n"
; mark: {"source":[[4,0,4,8],[5,0,5,8]],"target":[[9,0,9,6],[10,0,10,6]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" ("py.identifier" "_val_") (str ".") ("py.identifier" (val "copy"))) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.array" (str "[") ("js.spread_element" (str "...") ("js.identifier" "_val1_")) (str "]")) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na.extend(b)\na[1].extend([2,3])\n\n### JavaScript\n\na = a.concat(b);\na[1] = a[1].concat([2,3]);\n\n"
; mark: {"source":[[4,0,4,11],[5,0,5,18]],"target":[[9,0,9,15],[10,0,10,25]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" "." (str ".") ("py.identifier" (val "extend"))) ("py.argument_list" (str "(") "." (str ")"))) "*")
  (fragment ("js.assignment_expression" ".1" (str "=") ("js.call_expression" ("js.member_expression" ".1" (str ".") ("js.property_identifier" (val "concat"))) ("js.arguments" (str "(") ".2" (str ")")))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nAnimalShelter()\nAnimalShelter(a)\n\n### JavaScript\n\nnew AnimalShelter();\nnew AnimalShelter(a);\n\n"
; mark: {"source":[[4,0,4,15],[5,0,5,16]],"target":[[9,0,9,19],[10,0,10,20]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "AnimalShelter")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "AnimalShelter")) ("js.arguments" (str "(") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nCat()\nCat(a)\n\n### JavaScript\n\nnew Cat();\nnew Cat(a);\n\n"
; mark: {"source":[[4,0,4,5],[5,0,5,6]],"target":[[9,0,9,9],[10,0,10,10]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "Cat")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "Cat")) ("js.arguments" (str "(") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nDog()\nDog(a)\n\n### JavaScript\n\nnew Dog();\nnew Dog(a);\n\n"
; mark: {"source":[[4,0,4,5],[5,0,5,6]],"target":[[9,0,9,9],[10,0,10,10]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "Dog")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "Dog")) ("js.arguments" (str "(") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nLinkedList()\nLinkedList(a)\n\n### JavaScript\n\nnew LinkedList();\nnew LinkedList(a);\n\n"
; mark: {"source":[[4,0,4,12],[5,0,5,13]],"target":[[9,0,9,16],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "LinkedList")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "LinkedList")) ("js.arguments" (str "(") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nLinkedListNode()\nLinkedListNode(a)\n\n### JavaScript\n\nnew LinkedListNode();\nnew LinkedListNode(a);\n\n"
; mark: {"source":[[4,0,4,16],[5,0,5,17]],"target":[[9,0,9,20],[10,0,10,21]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "LinkedListNode")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "LinkedListNode")) ("js.arguments" (str "(") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nBinaryTree()\nBinaryTree(x)\n\n### JavaScript\n\nnew BinaryTree();\nnew BinaryTree(x);"
; mark: {"source":[[4,0,4,12],[5,0,5,13]],"target":[[9,0,9,16],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "BinaryTree")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "BinaryTree")) ("js.arguments" (str "(") "*1")) "*2")
)


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nBinarySearchTree()\n\n### JavaScript\n\nnew BinarySearchTree();"
; mark: {"source":[[4,0,4,18]],"target":[[8,0,8,22]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "BinarySearchTree")) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "BinarySearchTree")) ("js.arguments" (str "(") (str ")"))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nBinaryNode()\nBinaryNode(x)\n\n### JavaScript\n\nnew BinaryNode();\nnew BinaryNode(x);"
; mark: {"source":[[4,0,4,12],[5,0,5,13]],"target":[[9,0,9,16],[10,0,10,17]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "BinaryNode")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "BinaryNode")) ("js.arguments" (str "(") "*1")) "*2")
)


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nNode()\nNode(x)\n\n### JavaScript\n\nnew Node();\nnew Node(x);"
; mark: {"source":[[4,0,4,6],[5,0,5,7]],"target":[[9,0,9,10],[10,0,10,11]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "Node")) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.identifier" (val "Node")) ("js.arguments" (str "(") "*1")) "*2")
)


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nself.NodeCls()\nself.NodeCls(a)\n\n### JavaScript\n\nnew this.NodeCls();\nnew this.NodeCls(a);\n\n"
; mark: {"source":[[4,0,4,14],[5,0,5,15]],"target":[[9,0,9,18],[10,0,10,19]]}
(match_expand 
  (fragment ("py.call" ("py.attribute" ("py.identifier" (val "self")) (str ".") ("py.identifier" (val "NodeCls"))) ("py.argument_list" (str "(") "*")) "*")
  (fragment ("js.new_expression" (str "new") ("js.member_expression" ("js.this" (str "this")) (str ".") ("js.property_identifier" (val "NodeCls"))) ("js.arguments" (str "(") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nsuper()\n\n### JavaScript\n\nsuper;\n\n"
; mark: {"source":[[4,0,4,7]],"target":[[8,0,8,5]]}
(match_expand 
  (fragment ("py.call" ("py.identifier" (val "super")) ("py.argument_list" (str "(") (str ")"))) "*")
  (fragment ("js.super" (str "super")) "*1")
)

(match_expand
  (fragment ("py.call" "*") "*")
  (fragment ("js.call_expression" "*1") "*2"))

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\na if True else b\n1 if a == b else 0\n\n### JavaScript\n\ntrue ? a : b;\na === b ? 1 : 0;\n\n"
(match_expand
  (fragment ("py.conditional_expression" "."  "." ".") "*")
  (fragment ("js.ternary_expression" ".2" ".1" ".3") "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nglobal x\nglobal y\n\n### JavaScript\n\nif (global.x === undefined) global.x = null;\nif (global.y === undefined) global.y = null;\n"
(match_expand
  (fragment ("py.global_statement" (str "global") ("py.identifier" "_val_")) "*")
  (fragment ("js.if_statement" 
    ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.member_expression" ("js.identifier" (val "global")) (str ".") ("js.property_identifier" "_val1_")) (str "===") ("js.undefined")) (str ")")) 
    ("js.expression_statement" ("js.assignment_expression" ("js.member_expression" ("js.identifier" (val "global")) (str ".") ("js.property_identifier" "_val1_")) (str "=") ("js.null")))) "*1")
)

(match_expand
  (fragment ("py.dictionary" "*") "*")
  (fragment ("js.object" "*1") "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n[x for x in []]\n[y+y for y in a]\n\n### JavaScript\n\nArray.from([]).map(x => x);\nArray.from(a).map(y => y+y);\n\n"
; mark: {"source":[[4,0,4,15],[5,0,5,16]],"target":[[9,0,9,26],[10,0,10,27]]}
(match_expand 
  (fragment ("py.list_comprehension" (str "[") "." ("py.for_in_clause" (str "for") ("py.identifier" "_val_") (str "in") ".") (str "]")) "*")
  (fragment ("js.call_expression" ("js.member_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "from"))) ("js.arguments" (str "(") ".2" (str ")"))) (str ".") ("js.property_identifier" (val "map"))) ("js.arguments" (str "(") ("js.arrow_function" (nostr) ("js.identifier" "_val1_") (str "=>") ".1") (str ")"))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n{x[\"id\"]:x for x in xs}\n{y:y*y for y in []}\n\n### JavaScript\n\nArray.from(xs).map((x) => [x[\"id\"], x]).reduce((a, b) => (a[b[0]] = b[1], a),{});\nArray.from([]).map((y) => [y, y*y]).reduce((a, b) => (a[b[0]] = b[1], a),{});\n"
(match_expand
  (fragment ("py.dictionary_comprehension"  
    ("py.pair" "." ".") 
    ("py.for_in_clause"  "." "."))
  "*")
  (fragment 
    ("js.call_expression" 
      ("js.member_expression" 
        ("js.call_expression" 
          ("js.member_expression" 
            ("js.call_expression" 
              ("js.member_expression" ("js.identifier" (val "Array"))  ("js.property_identifier" (val "from"))) 
              ("js.arguments" ".4")
            )  
            ("js.property_identifier" (val "map"))
          ) 
          ("js.arguments" 
            ("js.arrow_function" 
              (nostr)
              ("js.formal_parameters"  ".3" (str ")"))  
              ("js.array"  ".1"  ".2")
            ) 
          )
        )  
        ("js.property_identifier" (val "reduce"))
      ) 
      ("js.arguments"  
        ("js.arrow_function" 
          (nostr)
          ("js.formal_parameters"  ("js.identifier" (val "a"))  ("js.identifier" (val "b")) (str ")"))  
          ("js.parenthesized_expression"  ("js.sequence_expression" ("js.assignment_expression" ("js.subscript_expression" ("js.identifier" (val "a")) (str "[")  ("js.subscript_expression" ("js.identifier" (val "b")) (str "[")  ("js.number" (val 0)) ) )  ("js.subscript_expression" ("js.identifier" (val "b")) (str "[") ("js.number" (val 1)) ))  ("js.identifier" (val "a"))) )
        )  
        ("js.object")
      )
    )
  "*5")
)

(match_expand
  (fragment ("py.escape_sequence" "_val_") "*")
  (fragment ("js.escape_sequence" "_val1_") "*1")
)

(match_expand
  (fragment ("py.default_parameter" "."  ".") "*")
  (fragment ("js.assignment_pattern" ".1"  ".2") "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nimport math\n\n### JavaScript\n\n;\n\n"
(match_expand
  (fragment ("py.import_statement"  ("py.dotted_name" ("py.identifier" (val "math")))) "*")
  (fragment "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nimport sys\n\n### JavaScript\n\n;\n\n"
(match_expand
  (fragment ("py.import_statement"  ("py.dotted_name" ("py.identifier" (val "sys")))) "*")
  (fragment "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nimport itertools\n\n### JavaScript\n\n;\n\n"
(match_expand
  (fragment ("py.import_statement" (str "import") ("py.dotted_name" ("py.identifier" (val "itertools")))) "*")
  (fragment "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfrom math import floor\n\n### JavaScript\n\nlet floor = Math.floor;\n\n"
(match_expand
  (fragment ("py.import_from_statement"  ("py.dotted_name" ("py.identifier" (val "math")))  ("py.dotted_name" ("py.identifier" (val "floor")))) "*")
  (fragment ("js.lexical_declaration"  ("js.variable_declarator" ("js.identifier" (val "floor"))  ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "floor"))))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nfrom math import sqrt\n\n### JavaScript\n\nlet sqrt = Math.sqrt;\n\n"
(match_expand
  (fragment ("py.import_from_statement"  ("py.dotted_name" ("py.identifier" (val "math")))  ("py.dotted_name" ("py.identifier" (val "sqrt")))) "*")
  (fragment ("js.lexical_declaration"  ("js.variable_declarator" ("js.identifier" (val "sqrt"))  ("js.member_expression" ("js.identifier" (val "Math"))  ("js.property_identifier" (val "sqrt"))))) "*1")
)


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n# using assert in tests\n\n### JavaScript\n\nclass Assert {\n    static equal(a, b, msg) {\n        function _rec_eq(a, b) {\n            let [tpa, tpb] = [typeof(a), typeof(b)];\n            if (tpa !== tpb) return false;\n            if (a === b) return true;\n            if (a === null || a === undefined || b === null || b === undefined) return a == b;\n            if (tpa === \"string\" || tpa === \"number\" || tpa === \"boolean\") return a === b;\n            let [isaArr, isbArr] = [Array.isArray(a), Array.isArray(b)];\n            if (isaArr !== isbArr) return false;\n            if (isaArr) {\n                if (a.length !== b.length) return false;\n                for (let i = 0; i < a.length; i++) if(!_rec_eq(a[i], b[i])) return false;\n                return true;\n            }\n            if (tpa === \"object\") {\n                for(let k in a) if((!(k in b)) || (!_rec_eq(a[k], b[k]))) return false;\n                for(let k in b) if (!(k in a)) return false;\n                return true;\n            }\n           throw Error(\"MyAssertError unknown object type \" + tpa);\n        }\n        if(!_rec_eq(a, b)) throw Error(\"MyAssertError \" + (msg ? msg : \"Not Equal\"));\n    };\n    static contains(b, a, msg) {\n        if (b.indexOf(a) < 0) throw Error(\"MyAssertError \" + (msg ? msg : \"Not Containing\"));\n    };\n    static isTrue(trueval, msg) {\n        if (!trueval) throw Error(\"MyAssertError \" + (msg ? msg : \"Not True\"));\n    }\n}\n\n"
; mark: {"source":[[4,0,4,23]],"target":[[8,0,15,1]]}
(match_expand 
  (fragment ("py.comment" (val "# using assert in tests")) "*")
  (fragment ("js.class_declaration" (str "class") ("js.identifier" (val "Assert")) ("js.class_body" (str "{") ("js.method_definition" (str "static") (nostr) ("js.property_identifier" (val "equal")) ("js.formal_parameters" (str "(") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "b")) (str ",") ("js.identifier" (val "msg")) (str ")")) ("js.statement_block" (str "{") ("js.function_declaration" (str "function") ("js.identifier" (val "_rec_eq")) ("js.formal_parameters" (str "(") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "b")) (str ")")) ("js.statement_block" (str "{") ("js.lexical_declaration" (str "let") ("js.variable_declarator" ("js.array_pattern" (str "[") ("js.identifier" (val "tpa")) (str ",") ("js.identifier" (val "tpb")) (str "]")) (str "=") ("js.array" (str "[") ("js.unary_expression" (str "typeof") ("js.parenthesized_expression" (str "(") ("js.identifier" (val "a")) (str ")"))) (str ",") ("js.unary_expression" (str "typeof") ("js.parenthesized_expression" (str "(") ("js.identifier" (val "b")) (str ")"))) (str "]"))) (str ";")) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" (val "tpa")) (str "!==") ("js.identifier" (val "tpb"))) (str ")")) ("js.return_statement" (str "return") ("js.false" (str "false")) (str ";"))) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" (val "a")) (str "===") ("js.identifier" (val "b"))) (str ")")) ("js.return_statement" (str "return") ("js.true" (str "true")) (str ";"))) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.binary_expression" ("js.binary_expression" ("js.binary_expression" ("js.identifier" (val "a")) (str "===") ("js.null" (str "null"))) (str "||") ("js.binary_expression" ("js.identifier" (val "a")) (str "===") ("js.undefined" (str "undefined")))) (str "||") ("js.binary_expression" ("js.identifier" (val "b")) (str "===") ("js.null" (str "null")))) (str "||") ("js.binary_expression" ("js.identifier" (val "b")) (str "===") ("js.undefined" (str "undefined")))) (str ")")) ("js.return_statement" (str "return") ("js.binary_expression" ("js.identifier" (val "a")) (str "==") ("js.identifier" (val "b"))) (str ";"))) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.binary_expression" ("js.binary_expression" ("js.identifier" (val "tpa")) (str "===") ("js.string" (str "\"") ("js.string_fragment" (val "string")) (str "\""))) (str "||") ("js.binary_expression" ("js.identifier" (val "tpa")) (str "===") ("js.string" (str "\"") ("js.string_fragment" (val "number")) (str "\"")))) (str "||") ("js.binary_expression" ("js.identifier" (val "tpa")) (str "===") ("js.string" (str "\"") ("js.string_fragment" (val "boolean")) (str "\"")))) (str ")")) ("js.return_statement" (str "return") ("js.binary_expression" ("js.identifier" (val "a")) (str "===") ("js.identifier" (val "b"))) (str ";"))) ("js.lexical_declaration" (str "let") ("js.variable_declarator" ("js.array_pattern" (str "[") ("js.identifier" (val "isaArr")) (str ",") ("js.identifier" (val "isbArr")) (str "]")) (str "=") ("js.array" (str "[") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "isArray"))) ("js.arguments" (str "(") ("js.identifier" (val "a")) (str ")"))) (str ",") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Array")) (str ".") ("js.property_identifier" (val "isArray"))) ("js.arguments" (str "(") ("js.identifier" (val "b")) (str ")"))) (str "]"))) (str ";")) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" (val "isaArr")) (str "!==") ("js.identifier" (val "isbArr"))) (str ")")) ("js.return_statement" (str "return") ("js.false" (str "false")) (str ";"))) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.identifier" (val "isaArr")) (str ")")) ("js.statement_block" (str "{") ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.member_expression" ("js.identifier" (val "a")) (str ".") ("js.property_identifier" (val "length"))) (str "!==") ("js.member_expression" ("js.identifier" (val "b")) (str ".") ("js.property_identifier" (val "length")))) (str ")")) ("js.return_statement" (str "return") ("js.false" (str "false")) (str ";"))) ("js.for_statement" (str "for") (str "(") ("js.lexical_declaration" (str "let") ("js.variable_declarator" ("js.identifier" (val "i")) (str "=") ("js.number" (val "0"))) (str ";")) ("js.expression_statement" ("js.binary_expression" ("js.identifier" (val "i")) (str "<") ("js.member_expression" ("js.identifier" (val "a")) (str ".") ("js.property_identifier" (val "length")))) (str ";")) ("js.update_expression" ("js.identifier" (val "i")) (str "++")) (str ")") ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.call_expression" ("js.identifier" (val "_rec_eq")) ("js.arguments" (str "(") ("js.subscript_expression" ("js.identifier" (val "a")) (str "[") ("js.identifier" (val "i")) (str "]")) (str ",") ("js.subscript_expression" ("js.identifier" (val "b")) (str "[") ("js.identifier" (val "i")) (str "]")) (str ")")))) (str ")")) ("js.return_statement" (str "return") ("js.false" (str "false")) (str ";")))) ("js.return_statement" (str "return") ("js.true" (str "true")) (str ";")) (str "}"))) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" (val "tpa")) (str "===") ("js.string" (str "\"") ("js.string_fragment" (val "object")) (str "\""))) (str ")")) ("js.statement_block" (str "{") ("js.for_in_statement" (str "for") (str "(") (str "let") ("js.identifier" (val "k")) (str "in") ("js.identifier" (val "a")) (str ")") ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" (val "k")) (str "in") ("js.identifier" (val "b"))) (str ")"))) (str ")")) (str "||") ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.call_expression" ("js.identifier" (val "_rec_eq")) ("js.arguments" (str "(") ("js.subscript_expression" ("js.identifier" (val "a")) (str "[") ("js.identifier" (val "k")) (str "]")) (str ",") ("js.subscript_expression" ("js.identifier" (val "b")) (str "[") ("js.identifier" (val "k")) (str "]")) (str ")")))) (str ")"))) (str ")")) ("js.return_statement" (str "return") ("js.false" (str "false")) (str ";")))) ("js.for_in_statement" (str "for") (str "(") (str "let") ("js.identifier" (val "k")) (str "in") ("js.identifier" (val "b")) (str ")") ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.identifier" (val "k")) (str "in") ("js.identifier" (val "a"))) (str ")"))) (str ")")) ("js.return_statement" (str "return") ("js.false" (str "false")) (str ";")))) ("js.return_statement" (str "return") ("js.true" (str "true")) (str ";")) (str "}"))) ("js.throw_statement" (str "throw") ("js.call_expression" ("js.identifier" (val "Error")) ("js.arguments" (str "(") ("js.binary_expression" ("js.string" (str "\"") ("js.string_fragment" (val "MyAssertError unknown object type ")) (str "\"")) (str "+") ("js.identifier" (val "tpa"))) (str ")"))) (str ";")) (str "}"))) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.call_expression" ("js.identifier" (val "_rec_eq")) ("js.arguments" (str "(") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "b")) (str ")")))) (str ")")) ("js.throw_statement" (str "throw") ("js.call_expression" ("js.identifier" (val "Error")) ("js.arguments" (str "(") ("js.binary_expression" ("js.string" (str "\"") ("js.string_fragment" (val "MyAssertError ")) (str "\"")) (str "+") ("js.parenthesized_expression" (str "(") ("js.ternary_expression" ("js.identifier" (val "msg")) (str "?") ("js.identifier" (val "msg")) (str ":") ("js.string" (str "\"") ("js.string_fragment" (val "Not Equal")) (str "\""))) (str ")"))) (str ")"))) (str ";"))) (str "}"))) (str ";") ("js.method_definition" (str "static") (nostr) ("js.property_identifier" (val "contains")) ("js.formal_parameters" (str "(") ("js.identifier" (val "b")) (str ",") ("js.identifier" (val "a")) (str ",") ("js.identifier" (val "msg")) (str ")")) ("js.statement_block" (str "{") ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "b")) (str ".") ("js.property_identifier" (val "indexOf"))) ("js.arguments" (str "(") ("js.identifier" (val "a")) (str ")"))) (str "<") ("js.number" (val "0"))) (str ")")) ("js.throw_statement" (str "throw") ("js.call_expression" ("js.identifier" (val "Error")) ("js.arguments" (str "(") ("js.binary_expression" ("js.string" (str "\"") ("js.string_fragment" (val "MyAssertError ")) (str "\"")) (str "+") ("js.parenthesized_expression" (str "(") ("js.ternary_expression" ("js.identifier" (val "msg")) (str "?") ("js.identifier" (val "msg")) (str ":") ("js.string" (str "\"") ("js.string_fragment" (val "Not Containing")) (str "\""))) (str ")"))) (str ")"))) (str ";"))) (str "}"))) (str ";") ("js.method_definition" (str "static") (nostr) ("js.property_identifier" (val "isTrue")) ("js.formal_parameters" (str "(") ("js.identifier" (val "trueval")) (str ",") ("js.identifier" (val "msg")) (str ")")) ("js.statement_block" (str "{") ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.unary_expression" (str "!") ("js.identifier" (val "trueval"))) (str ")")) ("js.throw_statement" (str "throw") ("js.call_expression" ("js.identifier" (val "Error")) ("js.arguments" (str "(") ("js.binary_expression" ("js.string" (str "\"") ("js.string_fragment" (val "MyAssertError ")) (str "\"")) (str "+") ("js.parenthesized_expression" (str "(") ("js.ternary_expression" ("js.identifier" (val "msg")) (str "?") ("js.identifier" (val "msg")) (str ":") ("js.string" (str "\"") ("js.string_fragment" (val "Not True")) (str "\""))) (str ")"))) (str ")"))) (str ";"))) (str "}"))) (str "}"))) "*1")
)


; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\n# helllo\n# hi\n\n### JavaScript\n\n;\n;\n"
; mark: {"source":[[4,0,4,8],[5,0,5,4]],"target":[[9,0,9,0],[10,0,10,0]]}
(match_expand 
  (fragment ("py.comment" "_val_") "*")
  (fragment "*1")
)

(match_expand
  (fragment ("py.pattern_list" "*") "*")
  (fragment ("js.array_pattern" "*1") "*2")
)

(match_expand
  (fragment ("py.list_pattern" "*") "*")
  (fragment ("js.array_pattern" "*1") "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nif __name__ == \"__main__\":\n  a = 1\n\nif __name__ == \"__main__\":\n  print()\n\n### JavaScript\n\n{\n\"main\";\n(function() {\n  a = 1;\n})();\n}\n\n{\n\"main\";\n(function() {\n  print();\n})();\n}\n\n"
; mark: {"source":[[4,0,5,7],[7,0,8,9]],"target":[[12,0,17,1],[19,0,24,1]]}
(match_expand 
  (fragment ("py.if_statement" (str "if") ("py.comparison_operator" ("py.identifier" (val "__name__")) (str "==") ("py.string" ("py.string_content" (val "__main__")))) (str ":") ("py.block" "*")) "*")
  (fragment ("js.expression_statement" ("js.string" ("js.string_fragment" (val "main"))) (str ";")) ("js.expression_statement" ("js.call_expression" ("js.parenthesized_expression" (str "(") ("js.function" (str "function") ("js.formal_parameters" (str "(") (str ")")) ("js.statement_block" (str "{") "*1" (str "}"))) (str ")")) ("js.arguments" (str "(") (str ")"))) (str ";")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nimport unittest\n\n### JavaScript\n\nlet unittest = {\n    TestCase: class TestCase {},\n    subclasses: [],\n    main: function() {\n        for (let testclass of this.subclasses) {\n            let test_obj = new testclass();\n            for (let k of Object.getOwnPropertyNames(testclass.prototype)) {\n                let val = test_obj[k];\n                if (k.startsWith(\"test_\") && typeof(val) == \"function\") val.apply(test_obj);\n            }\n        }\n    } \n}\n"
; mark: {"source":[[4,0,4,15]],"target":[[8,0,20,1]]}
(match_expand 
  (fragment ("py.import_statement" (str "import") ("py.dotted_name" ("py.identifier" (val "unittest")))) "*")
  (fragment ("js.lexical_declaration" (str "let") ("js.variable_declarator" ("js.identifier" (val "unittest")) (str "=") ("js.object" (str "{") ("js.pair" ("js.property_identifier" (val "TestCase")) (str ":") ("js.class" (str "class") ("js.identifier" (val "TestCase")) ("js.class_body" (str "{") (str "}")))) (str ",") ("js.pair" ("js.property_identifier" (val "subclasses")) (str ":") ("js.array" (str "[") (str "]"))) (str ",") ("js.pair" ("js.property_identifier" (val "main")) (str ":") ("js.function" (str "function") ("js.formal_parameters" (str "(") (str ")")) ("js.statement_block" (str "{") ("js.for_in_statement" (str "for") (str "(") (str "let") ("js.identifier" (val "testclass")) (str "of") ("js.member_expression" ("js.this" (str "this")) (str ".") ("js.property_identifier" (val "subclasses"))) (str ")") ("js.statement_block" (str "{") ("js.lexical_declaration" (str "let") ("js.variable_declarator" ("js.identifier" (val "test_obj")) (str "=") ("js.new_expression" (str "new") ("js.identifier" (val "testclass")) ("js.arguments" (str "(") (str ")")))) (str ";")) ("js.for_in_statement" (str "for") (str "(") (str "let") ("js.identifier" (val "k")) (str "of") ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Object")) (str ".") ("js.property_identifier" (val "getOwnPropertyNames"))) ("js.arguments" (str "(") ("js.member_expression" ("js.identifier" (val "testclass")) (str ".") ("js.property_identifier" (val "prototype"))) (str ")"))) (str ")") ("js.statement_block" (str "{") ("js.lexical_declaration" (str "let") ("js.variable_declarator" ("js.identifier" (val "val")) (str "=") ("js.subscript_expression" ("js.identifier" (val "test_obj")) (str "[") ("js.identifier" (val "k")) (str "]"))) (str ";")) ("js.if_statement" (str "if") ("js.parenthesized_expression" (str "(") ("js.binary_expression" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "k")) (str ".") ("js.property_identifier" (val "startsWith"))) ("js.arguments" (str "(") ("js.string" (str "\"") ("js.string_fragment" (val "test_")) (str "\"")) (str ")"))) (str "&&") ("js.binary_expression" ("js.unary_expression" (str "typeof") ("js.parenthesized_expression" (str "(") ("js.identifier" (val "val")) (str ")"))) (str "==") ("js.string" (str "\"") ("js.string_fragment" (val "function")) (str "\"")))) (str ")")) ("js.expression_statement" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "val")) (str ".") ("js.property_identifier" (val "apply"))) ("js.arguments" (str "(") ("js.identifier" (val "test_obj")) (str ")"))) (str ";"))) (str "}"))) (str "}"))) (str "}")))) (str "}")))) "*1")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass Test(unittest.TestCase):\n  a = 1\n\nclass TestA(unittest.TestCase):\n  def a(): pass\n\n### JavaScript\n{\nclass Test extends unittest.TestCase {\n    a = 1;\n}\nunittest.subclasses.push(Test);\n}\n\n{\nclass TestA extends unittest.TestCase {\n    a() {}\n}\nunittest.subclasses.push(TestA);\n}"
; mark: {"source":[[4,0,5,7],[7,0,8,15]],"target":[[11,0,16,1],[18,0,23,1]]}
(match_expand 
  (fragment ("py.class_definition" (str "class") ("py.identifier" "_val_") ("py.argument_list" (str "(") ("py.attribute" ("py.identifier" (val "unittest")) (str ".") ("py.identifier" (val "TestCase"))) (str ")")) (str ":") ("py.block" "*")) "*")
  (fragment ("js.class_declaration" (str "class") ("js.identifier" "_val1_") ("js.class_heritage" (str "extends") ("js.member_expression" ("js.identifier" (val "unittest")) (str ".") ("js.property_identifier" (val "TestCase")))) ("js.class_body" (str "{") "*1")) ("js.expression_statement" ("js.call_expression" ("js.member_expression" ("js.member_expression" ("js.identifier" (val "unittest")) (str ".") ("js.property_identifier" (val "subclasses"))) (str ".") ("js.property_identifier" (val "push"))) ("js.arguments" (str "(") ("js.identifier" "_val1_") (str ")"))) (str ";")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass Test:\n  a = 1\n\nclass TestA:\n  def a(): pass\n\n### JavaScript\n\nclass Test {\n    a = 1;\n}\n\nclass TestA {\n    a() {}\n}"
; mark: {"source":[[4,0,5,7],[7,0,8,15]],"target":[[12,0,14,1],[16,0,18,1]]}
(match_expand 
  (fragment ("py.class_definition" (str "class") ("py.identifier" "_val_") (str ":") ("py.block" "*")) "*")
  (fragment ("js.class_declaration" (str "class") ("js.identifier" "_val1_") ("js.class_body" (str "{") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nclass Test(CA):\n  a = 1\n\nclass TestA(CB):\n  def a(): pass\n\n### JavaScript\n\nclass Test extends CA {\n    a = 1;\n}\n\nclass TestA extends CB {\n    a() {}\n}"
; mark: {"source":[[4,0,5,7],[7,0,8,15]],"target":[[12,0,14,1],[16,0,18,1]]}
(match_expand 
  (fragment ("py.class_definition" (str "class") ("py.identifier" "_val_") ("py.argument_list" (str "(") ("py.identifier" "_val_") (str ")")) (str ":") ("py.block" "*")) "*")
  (fragment ("js.class_declaration" (str "class") ("js.identifier" "_val1_") ("js.class_heritage" (str "extends") ("js.identifier" "_val2_")) ("js.class_body" (str "{") "*1")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nassert a == b\nassert a() == b()\n\n### JavaScript\n\nAssert.equal(a, b);\nAssert.equal(a(), b());\n\n"
; mark: {"source":[[4,0,4,13],[5,0,5,17]],"target":[[9,0,9,18],[10,0,10,22]]}
(match_expand 
  (fragment ("py.assert_statement" (str "assert") ("py.comparison_operator" "." (str "==") ".")) "*")
  (fragment ("js.expression_statement" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Assert")) (str ".") ("js.property_identifier" (val "equal"))) ("js.arguments" (str "(") ".1" (str ",") ".2" (str ")")))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nassert a == b, \"dfdf\"\nassert a() == b(), msg\n\n### JavaScript\n\nAssert.equal(a, b);\nAssert.equal(a(), b());\n\n"
; mark: {"source":[[4,0,4,13],[5,0,5,17]],"target":[[9,0,9,18],[10,0,10,22]]}
(match_expand 
  (fragment ("py.assert_statement" (str "assert") ("py.comparison_operator" "." (str "==") ".") (str ",") ".") "*")
  (fragment ("js.expression_statement" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Assert")) (str ".") ("js.property_identifier" (val "equal"))) ("js.arguments" (str "(") ".1" (str ",") ".2" (str ")")))) "*4")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nassert a in b\nassert a() in b()\n\n### JavaScript\n\nAssert.contains(b, a);\nAssert.contains(b(), a());\n\n"
; mark: {"source":[[4,0,4,13],[5,0,5,17]],"target":[[9,0,9,18],[10,0,10,22]]}
(match_expand 
  (fragment ("py.assert_statement" (str "assert") ("py.comparison_operator" "." (str "in") ".")) "*")
  (fragment ("js.expression_statement" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Assert")) (str ".") ("js.property_identifier" (val "contains"))) ("js.arguments" (str "(") ".2" (str ",") ".1" (str ")")))) "*3")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nassert boolfunc()\nassert not boolfunc()\n\n### JavaScript\n\nAssert.isTrue(boolfunc());\nAssert.isTrue(!(boolfunc()));\n\n"
; mark: {"source":[[4,0,4,17],[5,0,5,21]],"target":[[9,0,9,25],[10,0,10,28]]}
(match_expand 
  (fragment ("py.assert_statement" (str "assert") ".") "*")
  (fragment ("js.expression_statement" ("js.call_expression" ("js.member_expression" ("js.identifier" (val "Assert")) (str ".") ("js.property_identifier" (val "isTrue"))) ("js.arguments" (str "(") ".1" (str ")")))) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nraise Exception(mm)\nraise ValueError(\"xxx\")\n\n### JavaScript\n\nthrow Error(mm);\nthrow Error(\"xxx\");\n\n"
; mark: {"source":[[4,0,4,19],[5,0,5,22]],"target":[[9,0,9,15],[10,0,10,18]]}
(match_expand 
  (fragment ("py.raise_statement" (str "raise") ("py.call" ("py.identifier" "_val_") ("py.argument_list" (str "(") "." (str ")")))) "*")
  (fragment ("js.throw_statement" (str "throw") ("js.call_expression" ("js.identifier" (val "Error")) ("js.arguments" (str "(") ".1" (str ")"))) (str ";")) "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nnonlocal x\nnonlocal y\n\n### JavaScript\n\n;\n;\n"
; mark: {"source":[[4,0,4,10],[5,0,5,10]],"target":[[9,0,9,0],[10,0,10,0]]}
(match_expand 
  (fragment ("py.nonlocal_statement" (str "nonlocal") "*") "*")
  (fragment "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\nyield 1\nyield a\n\n### JavaScript\n\nyield 1;\nyield a;\n\n"
; mark: {"source":[[4,0,4,7],[5,0,5,7]],"target":[[9,0,9,7],[10,0,10,7]]}
(match_expand 
  (fragment ("py.yield" (str "yield") ".") "*")
  (fragment ("js.yield_expression" (str "yield") (nostr) ".1") "*2")
)

; examples: "\n##### Translate this function from Python into JavaScript\n### Python\n\npass\n\n### JavaScript\n\n;\n\n"
; mark: {"source":[[4,0,4,4]],"target":[[8,0,8,0]]}
(match_expand 
  (fragment ("py.pass_statement" (str "pass")) "*")
  (fragment "*1")
)
