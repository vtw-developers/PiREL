(ext_match_expand
  (fragment "_liststr_" ("py.if_statement"  ("py.comparison_operator" ("py.call" ("py.identifier" (val "f_filled")) ".")  ("py.call" ("py.identifier" (val "f_gold")) ".")) ".") "*")
  (fragment "_liststr1_" 
    ("py.expression_statement" ("py.assignment" ("py.identifier" (val "idx")) (str "=") ("py.identifier" (val "i")))) (nostr)
    ("py.expression_statement" ("py.assignment" ("py.identifier" (val "result"))  ("py.call" ("py.identifier" (val "f_gold")) ".1")))
     "*4")  
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.expression_statement" ("py.assignment" ("py.identifier" (val "param")) (str "=") ".")) "*")
  (fragment "_liststr1_" ("py.expression_statement" ("py.assignment" ("py.identifier" (val "param")) (str "=") ("py.call" ("py.identifier" (val "SOURCE_AST_IDX")) ("py.argument_list" (str "(") ("py.integer" (val_ast_id "@.1")) (str ")"))))) "*2")
  (flags "disabled"))

(ext_match_expand
  (fragment "_liststr_" 
    ("py.if_statement" 
      ("py.comparison_operator" 
        ("py.call" ("py.identifier" (val "abs")) ("py.argument_list" 
          ("py.binary_operator" 
            ("py.integer" (val "1")) 
            (str "-") 
            ("py.binary_operator" 
              ("py.parenthesized_expression" 
                ("py.binary_operator" 
                  ("py.float" (str "0.0000001")) 
                  (str "+") 
                  ("py.call" ("py.identifier" (val "abs")) ("py.argument_list"  ("py.call" ("py.identifier" (val "f_gold")) ".")))
                )
              ) 
              (str "/") 
              ("py.parenthesized_expression" 
                ("py.binary_operator" 
                  ("py.call" ("py.identifier" (val "abs")) ("py.argument_list"  ("py.call" ("py.identifier" (val "f_filled")) "."))) 
                  (str "+") 
                  ("py.float" (str "0.0000001"))
                ) 
              )
            )
          ))
        ) 
        (str "<") 
        ("py.float" (str "0.001"))
      ) 
      "."
    )
    "*"
  )
  (fragment "_liststr1_" 
    ("py.expression_statement" ("py.assignment" ("py.identifier" (val "idx")) (str "=") ("py.identifier" (val "i")))) (nostr)
    ("py.expression_statement" ("py.assignment" ("py.identifier" (val "result"))  ("py.call" ("py.identifier" (val "f_gold")) ".1")))
     "*4")  
  (flags)
)

(ext_match_expand
  (fragment 
    ("py.expression_statement" ("py.call" ("py.identifier" (val "f_filled")) ".")) 
    ("py.expression_statement" ("py.call" ("py.identifier" (val "f_gold")) ".")) 
    ("py.if_statement"  ("py.comparison_operator" ("py.identifier" (val "parameters_set"))  ("py.subscript" ("py.identifier" (val "filled_function_param"))  ("py.identifier" (val "i")) ))  
      ".")
    "*"
  )
  (fragment
    ("py.expression_statement" ("py.assignment" ("py.identifier" (val "idx"))  ("py.identifier" (val "i")))) (nostr)
    ("py.expression_statement" ("py.call" ("py.identifier" (val "f_gold")) ".2")) (nostr)
    ("py.expression_statement" ("py.assignment" ("py.identifier" (val "result"))  ("py.identifier" (val "parameters_set"))))
    "*4"
  )
  (flags)
)

(ext_match_expand
  (fragment "_liststr_" ("py.expression_statement" ("py.assignment" ("py.identifier" (val "filled_function_param")) ".")) "*")
  (fragment "_liststr1_" "*2")
  (flags)
)

(ext_match_expand
  (fragment "_liststr_"
    ("py.function_definition" (str "def") ("py.identifier" (val "f_gold")) "." ".")
    ("py.comment" "_val_")
    ("py.if_statement"  ("py.comparison_operator" ("py.identifier" (val "__name__"))  ".")  ("py.block" "*")) "*")
  (fragment "_liststr1_"
    ("py.function_definition" (str "def") ("py.identifier" (val "test")) ("py.parameters")  
      ("py.block" ("py.expression_statement" ("py.string" ("py.string_content" (val "--- test function ---"))))  "*4"))
    ("py.expression_statement" ("py.string" ("py.string_content" (val "-----------------")))) (nostr)
    ("py.function_definition" (str "def") ("py.identifier" (val "f_gold")) ".1" ".2")
    ("py.expression_statement" ("py.string" ("py.string_content" (val "-----------------")))) (nostr)
    ("py.expression_statement" ("py.call" ("py.identifier" (val "test")) ("py.argument_list" (str "(") (str ")"))))
     "*5")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.expression_statement" ("py.assignment" ("py.identifier" (val "n_success")) ("py.integer" (val "0")))) "*")
  (fragment "_liststr1_" "*1")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.expression_statement" ("py.call" ("py.identifier" (val "print")) ("py.argument_list"  ("py.binary_operator" "."  ("py.tuple"  ("py.identifier" (val "n_success"))  "."))))) "*")
  (fragment "_liststr1_" "*3")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.identifier" "_val_") "_liststr_" "*")
  (fragment "_liststr1_" ("py.identifier" "_val1_") "_liststr2_" "*1")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.integer" "_val_") "_liststr_" "*")
  (fragment "_liststr1_" ("py.integer" "_val1_") "_liststr2_" "*1")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.float" "_val_") "_liststr_" "*")
  (fragment "_liststr1_" ("py.float" "_val1_") "_liststr2_" "*1")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.string" "_anno_" "*") "_liststr_" "*")
  (fragment "_liststr1_" ("py.string" "_anno1_" "*1") "_liststr2_" "*2")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.string_content" "_val_") "_liststr_" "*")
  (fragment "_liststr1_" ("py.string_content" "_val1_") "_liststr2_" "*1")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.escape_sequence" "_val_") "_liststr_" "*")
  (fragment "_liststr1_" ("py.escape_sequence" "_val1_") "_liststr2_" "*1")
  (flags))

(ext_match_expand
  (fragment "_liststr_" ("py.comment" "_val_") "_liststr_" "*")
  (fragment "_liststr1_" "_liststr2_" "*1")
  (flags))


(ext_match_expand 
  (fragment "_liststr_" ("_anynt_" "_liststr_" "*") "_liststr_" "*")
  (fragment "_liststr1_" (nostr) ("_anynt1_" "_liststr2_" "*1"  (nostr)) "_liststr3_" "*2")
  (flags))

; no (nostr) after liststr3 because this fragment might be a "." or some kind of partial fragment.